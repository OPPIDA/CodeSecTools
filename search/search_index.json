{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"CodeSecTools","text":"<p>A framework for code security that provides abstractions for static analysis tools and datasets to support their integration, testing, and evaluation.</p>"},{"location":"index.html#overview","title":"Overview","text":"<p>CodeSecTools is a collection of scripts and wrappers that abstract external resources (such as SAST tools, datasets, and codebases), providing standardized interfaces to help them interact easily.</p> <p>Warning</p> <p>This project provides wrappers and scripts to integrate with various third-party static analysis security testing (SAST) tools and datasets. It is important to note that this project does not include these third-party tools or datasets, unless otherwise specified. When a tool or dataset is included, its associated license file is also provided.</p> <p>Users of this project are solely responsible for reviewing, understanding, and complying with the licenses and terms of use associated with any third-party tools or datasets they choose to use through this framework. The respective licenses and terms can be found on the official websites or in the documentation of each tool or dataset.</p>"},{"location":"index.html#installation","title":"Installation","text":"<ul> <li> <p>Clone the repository: <pre><code>git clone https://github.com/OPPIDA/CodeSecTools.git\ncd CodeSecTools\n</code></pre></p> </li> <li> <p>Install the project:</p> <ul> <li> <p>Using uv:   <pre><code>uv tool install .\n</code></pre></p> </li> <li> <p>Using pipx:   <pre><code>pipx install .\n</code></pre></p> </li> <li> <p>Using pip (not recommended, as it can break your system packages):   <pre><code>pip install .\n</code></pre></p> </li> </ul> </li> </ul>"},{"location":"index.html#features","title":"Features","text":"<ul> <li>Standardized SAST Tool Integration: Provides a common abstraction layer for integrating various SAST tools. Once a tool is integrated, it automatically benefits from the framework\u2019s core functionalities.</li> <li>Unified Dataset Integration: Uses a similar abstraction for handling datasets, allowing for consistent benchmarking of SAST tools across different sets of codebases, whether they are collections of individual files or entire Git repositories.</li> <li>Project Analysis and Benchmarking: Users can analyze their own projects or benchmark SAST tools against curated datasets to evaluate their effectiveness, including metrics like true positives, false positives, and false negatives.</li> <li>Concurrent Analysis for Cross-Verification: CodeSecTools can run multiple SAST tools simultaneously on the same project. This allows for the aggregation and cross-verification of results, increasing confidence in the identified vulnerabilities by highlighting findings reported by multiple tools.</li> <li>Automated Reporting and Visualization: The framework can generate detailed reports in HTML format and create graphs to visualize analysis results, helping to identify trends such as the most common CWEs or the files with the highest number of defects.</li> </ul>"},{"location":"index.html#sast-tool-integration-status","title":"SAST Tool Integration Status","text":"SAST Tool Languages Maintained Tested Coverity Java \u274c (Proprietary) \u274c (Proprietary) Semgrep Community Edition C, Java \u2705 \u2705 Snyk Code C, Java \u2705 \u274c (Rate limited) Bearer Java \u2705 \u2705 SpotBugs Java \u2705 \u2705"},{"location":"index.html#usage","title":"Usage","text":""},{"location":"index.html#command-line-interface","title":"Command-line interface","text":"<pre><code>$ cstools\n\n Usage: cstools [OPTIONS] COMMAND [ARGS]...                                                                                                        \n\n CodeSecTools: A framework for code security that provides abstractions for static analysis tools and datasets to support their integration,       \n testing, and evaluation.                                                                                                                          \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --debug               -d        Show debugging messages and disable pretty exceptions.                                                          \u2502\n\u2502 --version             -v        Show the tool's version.                                                                                        \u2502\n\u2502 --install-completion            Install completion for the current shell.                                                                       \u2502\n\u2502 --show-completion               Show completion for the current shell, to copy it or customize the installation.                                \u2502\n\u2502 --help                          Show this message and exit.                                                                                     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 status      Display the availability of SAST tools and datasets.                                                                                \u2502\n\u2502 allsast     Run all available SAST tools together.                                                                                              \u2502\n\u2502 bearer      Bearer SAST                                                                                                                         \u2502\n\u2502 coverity    Coverity Static Analysis                                                                                                            \u2502\n\u2502 semgrepce   Semgrep Community Edition Engine                                                                                                    \u2502\n\u2502 snykcode    Snyk Code                                                                                                                           \u2502\n\u2502 spotbugs    SpotBugs                                                                                                                            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"index.html#python-api","title":"Python API","text":"<pre><code>from pathlib import Path\n\nfrom codesectools.sasts.core.graphics import ProjectGraphics\nfrom codesectools.sasts.tools.SemgrepCE.parser import SemgrepCEAnalysisResult\nfrom codesectools.sasts.tools.SemgrepCE.sast import SemgrepCESAST\n\nproject_dir = Path(\"path/to/project\")\noutput_dir = Path(\"path/to/project\")\n\n# Run SAST Tool\nsast = SemgrepCESAST()\nsast.run_analysis(lang=\"java\", project_dir=project_dir, output_dir=output_dir)\n\n# Parse results\nparser = SemgrepCEAnalysisResult.load_from_output_dir(output_dir=output_dir)\nprint(parser.stats_by_categories())\nprint(parser.stats_by_checkers())\nprint(parser.stats_by_cwes())\nprint(parser.stats_by_files())\n\n# Visualize results\ngraphics = ProjectGraphics(sast=sast, project_name=project_dir.name)\nfor plot_function in graphics.plot_functions:\n    fig = plot_function()\n    fig.show()\n</code></pre>"},{"location":"index.html#documentation","title":"Documentation","text":"<p>The documentation is available online.</p> <p>Or, you can serve it locally: <pre><code>pip install .[docs]\nmkdocs serve\n</code></pre></p>"},{"location":"cli.html","title":"CLI Reference","text":"<p>This page provides documentation for the command line tools.</p>"},{"location":"cli.html#cstools","title":"cstools","text":"<p>CodeSecTools: A framework for code security that provides abstractions for static analysis tools and datasets to support their integration, testing, and evaluation.</p> <p>Usage:</p> <pre><code>cstools [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>-d</code>, <code>--debug</code> boolean Show debugging messages and disable pretty exceptions. <code>False</code> <code>-v</code>, <code>--version</code> boolean Show the tool's version. None <code>--install-completion</code> boolean Install completion for the current shell. None <code>--show-completion</code> boolean Show completion for the current shell, to copy it or customize the installation. None <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>allsast: Run all available SAST tools together.</li> <li>bearer: Bearer SAST</li> <li>coverity: Coverity Static Analysis</li> <li>download: Download any missing resources that are available for download.</li> <li>semgrepce: Semgrep Community Edition Engine</li> <li>snykcode: Snyk Code</li> <li>spotbugs: SpotBugs</li> <li>status: Display the availability of SAST tools and datasets.</li> </ul>"},{"location":"cli.html#cstools-allsast","title":"cstools allsast","text":"<p>Run all available SAST tools together.</p> <p>Usage:</p> <pre><code>cstools allsast [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>analyze: Analyze a project using all availbale SAST tools.</li> <li>benchmark: Benchmark a dataset using all SAST tools.</li> <li>info: List used SAST tools.</li> <li>list: List existing analysis results.</li> <li>plot: Generate plot for results visualization (datasets are not supported).</li> <li>report: Generate an HTML report</li> </ul>"},{"location":"cli.html#cstools-allsast-analyze","title":"cstools allsast analyze","text":"<p>Analyze a project using all availbale SAST tools.</p> <p>Usage:</p> <pre><code>cstools allsast analyze [OPTIONS] LANG\n</code></pre> <p>Options:</p> Name Type Description Default <code>--artifact-dir</code> path Pre-built artifacts directory (for PrebuiltSAST only) None <code>--overwrite</code> boolean Overwrite existing analysis results for current project <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli.html#cstools-allsast-benchmark","title":"cstools allsast benchmark","text":"<p>Benchmark a dataset using all SAST tools.</p> <p>Usage:</p> <pre><code>cstools allsast benchmark [OPTIONS] DATASET\n</code></pre> <p>Options:</p> Name Type Description Default <code>--overwrite</code> boolean Overwrite existing results (not applicable on CVEfixes) <code>False</code> <code>--testing</code> boolean Run benchmark over a single dataset unit for testing <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli.html#cstools-allsast-info","title":"cstools allsast info","text":"<p>List used SAST tools.</p> <p>Usage:</p> <pre><code>cstools allsast info [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli.html#cstools-allsast-list","title":"cstools allsast list","text":"<p>List existing analysis results.</p> <p>Usage:</p> <pre><code>cstools allsast list [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli.html#cstools-allsast-plot","title":"cstools allsast plot","text":"<p>Generate plot for results visualization (datasets are not supported).</p> <p>Usage:</p> <pre><code>cstools allsast plot [OPTIONS] PROJECT\n</code></pre> <p>Options:</p> Name Type Description Default <code>--overwrite</code> boolean Overwrite existing figures <code>False</code> <code>--show</code> boolean Display figures <code>False</code> <code>--pgf</code> boolean Export figures to pgf format (for LaTeX document) <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli.html#cstools-allsast-report","title":"cstools allsast report","text":"<p>Generate an HTML report</p> <p>Usage:</p> <pre><code>cstools allsast report [OPTIONS] PROJECT\n</code></pre> <p>Options:</p> Name Type Description Default <code>--overwrite</code> boolean Overwrite existing results <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli.html#cstools-bearer","title":"cstools bearer","text":"<p>Bearer SAST</p> <p>Usage:</p> <pre><code>cstools bearer [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>install: List instruction to install missing requirements.</li> </ul>"},{"location":"cli.html#cstools-bearer-install","title":"cstools bearer install","text":"<p>List instruction to install missing requirements.</p> <p>Usage:</p> <pre><code>cstools bearer install [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli.html#cstools-coverity","title":"cstools coverity","text":"<p>Coverity Static Analysis</p> <p>Usage:</p> <pre><code>cstools coverity [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>install: List instruction to install missing requirements.</li> </ul>"},{"location":"cli.html#cstools-coverity-install","title":"cstools coverity install","text":"<p>List instruction to install missing requirements.</p> <p>Usage:</p> <pre><code>cstools coverity install [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli.html#cstools-download","title":"cstools download","text":"<p>Download any missing resources that are available for download.</p> <p>Usage:</p> <pre><code>cstools download [OPTIONS] NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli.html#cstools-semgrepce","title":"cstools semgrepce","text":"<p>Semgrep Community Edition Engine</p> <p>Usage:</p> <pre><code>cstools semgrepce [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>install: List instruction to install missing requirements.</li> </ul>"},{"location":"cli.html#cstools-semgrepce-install","title":"cstools semgrepce install","text":"<p>List instruction to install missing requirements.</p> <p>Usage:</p> <pre><code>cstools semgrepce install [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli.html#cstools-snykcode","title":"cstools snykcode","text":"<p>Snyk Code</p> <p>Usage:</p> <pre><code>cstools snykcode [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>install: List instruction to install missing requirements.</li> <li>list: List existing analysis results.</li> <li>plot: Generate plot for results visualization.</li> </ul>"},{"location":"cli.html#cstools-snykcode-install","title":"cstools snykcode install","text":"<p>List instruction to install missing requirements.</p> <p>Usage:</p> <pre><code>cstools snykcode install [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli.html#cstools-snykcode-list","title":"cstools snykcode list","text":"<p>List existing analysis results.</p> <p>Usage:</p> <pre><code>cstools snykcode list [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli.html#cstools-snykcode-plot","title":"cstools snykcode plot","text":"<p>Generate plot for results visualization.</p> <p>Usage:</p> <pre><code>cstools snykcode plot [OPTIONS] RESULT\n</code></pre> <p>Options:</p> Name Type Description Default <code>--overwrite</code> boolean Overwrite existing figures <code>False</code> <code>--show</code> boolean Display figures <code>False</code> <code>--pgf</code> boolean Export figures to pgf format (for LaTeX document) <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli.html#cstools-spotbugs","title":"cstools spotbugs","text":"<p>SpotBugs</p> <p>Usage:</p> <pre><code>cstools spotbugs [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>install: List instruction to install missing requirements.</li> <li>list: List existing analysis results.</li> <li>plot: Generate plot for results visualization.</li> </ul>"},{"location":"cli.html#cstools-spotbugs-install","title":"cstools spotbugs install","text":"<p>List instruction to install missing requirements.</p> <p>Usage:</p> <pre><code>cstools spotbugs install [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli.html#cstools-spotbugs-list","title":"cstools spotbugs list","text":"<p>List existing analysis results.</p> <p>Usage:</p> <pre><code>cstools spotbugs list [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli.html#cstools-spotbugs-plot","title":"cstools spotbugs plot","text":"<p>Generate plot for results visualization.</p> <p>Usage:</p> <pre><code>cstools spotbugs plot [OPTIONS] RESULT\n</code></pre> <p>Options:</p> Name Type Description Default <code>--overwrite</code> boolean Overwrite existing figures <code>False</code> <code>--show</code> boolean Display figures <code>False</code> <code>--pgf</code> boolean Export figures to pgf format (for LaTeX document) <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli.html#cstools-status","title":"cstools status","text":"<p>Display the availability of SAST tools and datasets.</p> <p>Usage:</p> <pre><code>cstools status [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--sasts</code> boolean Show sasts only <code>False</code> <code>--datasets</code> boolean Show datasets only <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"api/index.html","title":"API Reference","text":"<p>Available APIs:</p> <ul> <li><code>sasts</code></li> <li><code>datasets</code></li> <li><code>shared</code></li> </ul>"},{"location":"api/dataset.html","title":"Datasets","text":""},{"location":"api/dataset.html#codesectools.datasets.core","title":"codesectools.datasets.core","text":"<p>Initializes the core dataset module.</p> <p>Modules:</p> Name Description <code>dataset</code> <p>Defines the core abstract classes and data structures for datasets.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset","title":"dataset","text":"<p>Defines the core abstract classes and data structures for datasets.</p> <p>This module provides the foundational components for creating and managing datasets used for benchmarking SAST tools. It includes abstract base classes for different types of datasets (e.g., file-based, Git repository-based) and data classes to hold benchmark results.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.Dataset","title":"Dataset","text":"<pre><code>Dataset(lang: str | None = None)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract base class for all datasets.</p> <p>Defines the common interface that all dataset types must implement.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the dataset.</p> <code>supported_languages</code> <code>list[str]</code> <p>A list of programming languages supported by the dataset.</p> <p>Initialize the Dataset instance.</p> <p>Set up paths and load the dataset if a language is specified.</p> <p>Parameters:</p> Name Type Description Default <code>str | None</code> <p>The programming language of the dataset to load. Must be one of the supported languages for the dataset class.</p> <code>None</code> <p>Methods:</p> Name Description <code>is_cached</code> <p>Check if the dataset has been downloaded and is cached locally.</p> <code>prompt_license_agreement</code> <p>Display the dataset's license and prompt the user for agreement.</p> <code>download_files</code> <p>Download the raw dataset files.</p> <code>download_dataset</code> <p>Handle the full dataset download process, including license prompt and caching.</p> <code>load_dataset</code> <p>Load the dataset into memory.</p> <code>list_dataset_full_names</code> <p>List all available language-specific versions of this dataset.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.Dataset(lang)","title":"<code>lang</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.Dataset.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.Dataset.supported_languages","title":"supported_languages  <code>instance-attribute</code>","text":"<pre><code>supported_languages: list[str]\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.Dataset.license","title":"license  <code>instance-attribute</code>","text":"<pre><code>license: str\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.Dataset.license_url","title":"license_url  <code>instance-attribute</code>","text":"<pre><code>license_url: str\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.Dataset.directory","title":"directory  <code>instance-attribute</code>","text":"<pre><code>directory = USER_CACHE_DIR / self.name\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.Dataset.lang","title":"lang  <code>instance-attribute</code>","text":"<pre><code>lang = lang\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.Dataset.full_name","title":"full_name  <code>instance-attribute</code>","text":"<pre><code>full_name = f'{self.name}_{self.lang}'\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.Dataset.files","title":"files  <code>instance-attribute</code>","text":"<pre><code>files: list[File] = self.load_dataset()\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.Dataset.is_cached","title":"is_cached  <code>classmethod</code>","text":"<pre><code>is_cached() -&gt; bool\n</code></pre> <p>Check if the dataset has been downloaded and is cached locally.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the dataset is cached, False otherwise.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.Dataset.prompt_license_agreement","title":"prompt_license_agreement","text":"<pre><code>prompt_license_agreement() -&gt; None\n</code></pre> <p>Display the dataset's license and prompt the user for agreement.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.Dataset.download_files","title":"download_files  <code>abstractmethod</code>","text":"<pre><code>download_files() -&gt; None\n</code></pre> <p>Download the raw dataset files.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.Dataset.download_dataset","title":"download_dataset","text":"<pre><code>download_dataset() -&gt; None\n</code></pre> <p>Handle the full dataset download process, including license prompt and caching.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.Dataset.load_dataset","title":"load_dataset  <code>abstractmethod</code>","text":"<pre><code>load_dataset() -&gt; list[File]\n</code></pre> <p>Load the dataset into memory.</p> <p>This method must be implemented by subclasses to define how the dataset's contents are loaded.</p> <p>Returns:</p> Type Description <code>list[File]</code> <p>A list of <code>File</code> objects representing the dataset.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.Dataset.list_dataset_full_names","title":"list_dataset_full_names  <code>classmethod</code>","text":"<pre><code>list_dataset_full_names() -&gt; list[str]\n</code></pre> <p>List all available language-specific versions of this dataset.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>A sorted list of strings, where each string is the dataset name</p> <code>list[str]</code> <p>suffixed with a supported language (e.g., \"MyDataset_java\").</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.PrebuiltDatasetMixin","title":"PrebuiltDatasetMixin","text":"<p>Provide functionality for datasets that require a build step.</p> <p>Methods:</p> Name Description <code>is_built</code> <p>Check if the dataset has been built.</p> <code>list_prebuilt_files</code> <p>List the pre-built artefact files.</p> <p>Attributes:</p> Name Type Description <code>build_command</code> <code>str</code> <code>prebuilt_expected</code> <code>tuple[Path, str]</code>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.PrebuiltDatasetMixin.build_command","title":"build_command  <code>instance-attribute</code>","text":"<pre><code>build_command: str\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.PrebuiltDatasetMixin.prebuilt_expected","title":"prebuilt_expected  <code>instance-attribute</code>","text":"<pre><code>prebuilt_expected: tuple[Path, str]\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.PrebuiltDatasetMixin.is_built","title":"is_built","text":"<pre><code>is_built() -&gt; bool\n</code></pre> <p>Check if the dataset has been built.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.PrebuiltDatasetMixin.list_prebuilt_files","title":"list_prebuilt_files","text":"<pre><code>list_prebuilt_files() -&gt; list[Path]\n</code></pre> <p>List the pre-built artefact files.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.DatasetUnit","title":"DatasetUnit","text":"<p>Base class for a single unit within a dataset.</p> <p>Serves as a marker class for items like <code>File</code> or <code>GitRepo</code>.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.BenchmarkData","title":"BenchmarkData","text":"<p>Base class for storing data resulting from a benchmark.</p> <p>Serves as a marker class for data holders like <code>FileDatasetData</code> or <code>GitRepoDatasetData</code>.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.File","title":"File","text":"<pre><code>File(\n    filename: str,\n    content: str | bytes,\n    cwes: list[CWE],\n    has_vuln: bool,\n)\n</code></pre> <p>               Bases: <code>DatasetUnit</code></p> <p>Represent a single file in a dataset.</p> <p>Attributes:</p> Name Type Description <code>filename</code> <code>str</code> <p>The name of the file.</p> <code>content</code> <code>bytes</code> <p>The byte content of the file.</p> <code>cwes</code> <code>list[CWE]</code> <p>A list of CWEs associated with the file.</p> <code>has_vuln</code> <code>bool</code> <p>True if the vulnerability is real, False if it's intended to be a false positive test case.</p> <p>Initialize a File instance.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the file.</p> required <code>str | bytes</code> <p>The content of the file, as a string or bytes. It will be converted to bytes if provided as a string.</p> required <code>list[CWE]</code> <p>A list of CWEs associated with the file.</p> required <code>bool</code> <p>True if the vulnerability is real, False if it's intended to be a false positive test case.</p> required <p>Methods:</p> Name Description <code>__repr__</code> <p>Return a developer-friendly string representation of the File.</p> <code>__eq__</code> <p>Compare this File with another object for equality based on filename.</p> <code>save</code> <p>Save the file's content to a specified directory.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.File(filename)","title":"<code>filename</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.File(content)","title":"<code>content</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.File(cwes)","title":"<code>cwes</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.File(has_vuln)","title":"<code>has_vuln</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.File.filename","title":"filename  <code>instance-attribute</code>","text":"<pre><code>filename = filename\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.File.content","title":"content  <code>instance-attribute</code>","text":"<pre><code>content = content\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.File.cwes","title":"cwes  <code>instance-attribute</code>","text":"<pre><code>cwes = cwes\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.File.has_vuln","title":"has_vuln  <code>instance-attribute</code>","text":"<pre><code>has_vuln = has_vuln\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.File.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a developer-friendly string representation of the File.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string showing the class name, filename, and CWE IDs.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.File.__eq__","title":"__eq__","text":"<pre><code>__eq__(other: str | Self) -&gt; bool\n</code></pre> <p>Compare this File with another object for equality based on filename.</p> <p>Parameters:</p> Name Type Description Default <code>str | Self</code> <p>The object to compare with. Can be a string (filename) or    another File instance.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the filenames are equal, False otherwise.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.File.__eq__(other)","title":"<code>other</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.File.save","title":"save","text":"<pre><code>save(dir: Path) -&gt; None\n</code></pre> <p>Save the file's content to a specified directory.</p> <p>Parameters:</p> Name Type Description Default <code>Path</code> <p>The path to the directory where the file should be saved.</p> required"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.File.save(dir)","title":"<code>dir</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDataset","title":"FileDataset","text":"<pre><code>FileDataset(lang: str)\n</code></pre> <p>               Bases: <code>Dataset</code></p> <p>Abstract base class for datasets composed of individual files.</p> <p>Attributes:</p> Name Type Description <code>directory</code> <code>Path</code> <p>The directory path for the dataset.</p> <code>lang</code> <code>str</code> <p>The programming language of the dataset.</p> <code>full_name</code> <code>str</code> <p>The full name of the dataset, including the language.</p> <code>files</code> <code>list[File]</code> <p>A list of <code>File</code> objects loaded from the dataset.</p> <p>Initialize a FileDataset instance.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The programming language of the dataset to load.</p> required <p>Methods:</p> Name Description <code>validate</code> <p>Validate a SAST analysis result against the ground truth of the dataset.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDataset(lang)","title":"<code>lang</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDataset.validate","title":"validate","text":"<pre><code>validate(\n    analysis_result: AnalysisResult,\n) -&gt; FileDatasetData\n</code></pre> <p>Validate a SAST analysis result against the ground truth of the dataset.</p> <p>Compares the defects found by a SAST tool with the known vulnerabilities in the dataset files to categorize them as true positives, false positives, and false negatives, counting each unique (file, CWE) pair only once.</p> <p>Parameters:</p> Name Type Description Default <code>AnalysisResult</code> <p>The result from a SAST tool analysis.</p> required <p>Returns:</p> Type Description <code>FileDatasetData</code> <p>A <code>FileDatasetData</code> object containing the validation metrics.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDataset.validate(analysis_result)","title":"<code>analysis_result</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.PrebuiltFileDataset","title":"PrebuiltFileDataset","text":"<pre><code>PrebuiltFileDataset(lang: str)\n</code></pre> <p>               Bases: <code>PrebuiltDatasetMixin</code>, <code>FileDataset</code></p> <p>Represent a file-based dataset that requires a build step.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData","title":"FileDatasetData","text":"<pre><code>FileDatasetData(\n    dataset: FileDataset,\n    tp_defects: list[Defect],\n    fp_defects: list[Defect],\n    fn_defects: list[tuple[str, CWE]],\n    cwes_list: list[CWE],\n    tp_cwes: list[CWE],\n    fp_cwes: list[CWE],\n    fn_cwes: list[CWE],\n    file_number: int,\n    defect_number: int,\n    unique_correct_number: int,\n)\n</code></pre> <p>               Bases: <code>BenchmarkData</code></p> <p>Store the results of validating an analysis against a FileDataset.</p> <p>The counts for true positives, false positives, and false negatives are based on unique (file, CWE) pairs.</p> <p>Attributes:</p> Name Type Description <code>dataset</code> <code>FileDataset</code> <p>The dataset used for the benchmark.</p> <code>tp_defects</code> <code>list[Defect]</code> <p>A list of unique, correctly identified defects (True Positives).</p> <code>fp_defects</code> <code>list[Defect]</code> <p>A list of unique, incorrectly identified defects (False Positives).</p> <code>fn_defects</code> <code>list[tuple[str, CWE]]</code> <p>A list of unique vulnerabilities that were not found (False Negatives).</p> <code>cwes_list</code> <code>list[CWE]</code> <p>All CWEs present in the dataset's ground truth (may contain duplicates if a CWE appears in multiple files).</p> <code>tp_cwes</code> <code>list[CWE]</code> <p>List of CWEs from True Positive findings.</p> <code>fp_cwes</code> <code>list[CWE]</code> <p>List of CWEs from False Positive findings.</p> <code>fn_cwes</code> <code>list[CWE]</code> <p>List of CWEs from False Negative findings (missed vulnerabilities).</p> <code>file_number</code> <code>int</code> <p>Total number of files in the dataset.</p> <code>defect_number</code> <code>int</code> <p>Total number of defects reported by the tool (before de-duplication).</p> <code>unique_correct_number</code> <code>int</code> <p>Number of files with at least one correctly identified defect.</p> <p>Initialize a FileDatasetData instance.</p> <p>Parameters:</p> Name Type Description Default <code>FileDataset</code> <p>The dataset used for the benchmark.</p> required <code>list[Defect]</code> <p>A list of unique, correctly identified defects.</p> required <code>list[Defect]</code> <p>A list of unique, incorrectly identified defects.</p> required <code>list[tuple[str, CWE]]</code> <p>A list of unique vulnerabilities that were not found.</p> required <code>list[CWE]</code> <p>A list of all ground-truth CWEs in the dataset.</p> required <code>list[CWE]</code> <p>A list of CWEs from True Positive findings.</p> required <code>list[CWE]</code> <p>A list of CWEs from False Positive findings.</p> required <code>list[CWE]</code> <p>A list of CWEs from missed vulnerabilities.</p> required <code>int</code> <p>The total number of files in the dataset.</p> required <code>int</code> <p>The total number of defects found by the analysis (before de-duplication).</p> required <code>int</code> <p>The number of files with at least one correctly identified vulnerability.</p> required"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData(dataset)","title":"<code>dataset</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData(tp_defects)","title":"<code>tp_defects</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData(fp_defects)","title":"<code>fp_defects</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData(fn_defects)","title":"<code>fn_defects</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData(cwes_list)","title":"<code>cwes_list</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData(tp_cwes)","title":"<code>tp_cwes</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData(fp_cwes)","title":"<code>fp_cwes</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData(fn_cwes)","title":"<code>fn_cwes</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData(file_number)","title":"<code>file_number</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData(defect_number)","title":"<code>defect_number</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData(unique_correct_number)","title":"<code>unique_correct_number</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData.dataset","title":"dataset  <code>instance-attribute</code>","text":"<pre><code>dataset = dataset\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData.tp_defects","title":"tp_defects  <code>instance-attribute</code>","text":"<pre><code>tp_defects = tp_defects\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData.fp_defects","title":"fp_defects  <code>instance-attribute</code>","text":"<pre><code>fp_defects = fp_defects\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData.fn_defects","title":"fn_defects  <code>instance-attribute</code>","text":"<pre><code>fn_defects = fn_defects\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData.cwes_list","title":"cwes_list  <code>instance-attribute</code>","text":"<pre><code>cwes_list = cwes_list\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData.tp_cwes","title":"tp_cwes  <code>instance-attribute</code>","text":"<pre><code>tp_cwes = tp_cwes\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData.fp_cwes","title":"fp_cwes  <code>instance-attribute</code>","text":"<pre><code>fp_cwes = fp_cwes\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData.fn_cwes","title":"fn_cwes  <code>instance-attribute</code>","text":"<pre><code>fn_cwes = fn_cwes\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData.file_number","title":"file_number  <code>instance-attribute</code>","text":"<pre><code>file_number = file_number\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData.defect_number","title":"defect_number  <code>instance-attribute</code>","text":"<pre><code>defect_number = defect_number\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.FileDatasetData.unique_correct_number","title":"unique_correct_number  <code>instance-attribute</code>","text":"<pre><code>unique_correct_number = unique_correct_number\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepo","title":"GitRepo","text":"<pre><code>GitRepo(\n    name: str,\n    url: str,\n    commit: str,\n    size: int,\n    cwes: list[CWE],\n    files: list[str],\n    has_vuln: bool,\n)\n</code></pre> <p>               Bases: <code>DatasetUnit</code></p> <p>Represent a single Git repository in a dataset.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>A unique name for the repository, often a CVE ID.</p> <code>url</code> <code>str</code> <p>The URL to clone the Git repository.</p> <code>commit</code> <code>str</code> <p>The specific commit hash to check out.</p> <code>size</code> <code>int</code> <p>The size of the repository in bytes.</p> <code>cwes</code> <code>list[CWE]</code> <p>A list of CWEs associated with the repository.</p> <code>files</code> <code>list[str]</code> <p>A list of filenames known to be vulnerable in this commit.</p> <code>has_vuln</code> <code>bool</code> <p>True if there is really a vuln in the gitrepo.</p> <p>Initialize a GitRepo instance.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name/identifier for the repository.</p> required <code>str</code> <p>The clone URL of the repository.</p> required <code>str</code> <p>The commit hash to analyze.</p> required <code>int</code> <p>The size of the repository in bytes.</p> required <code>list[CWE]</code> <p>A list of CWEs associated with the repository.</p> required <code>list[str]</code> <p>A list of vulnerable files in the specified commit.</p> required <code>bool</code> <p>True if there is really a vuln in the gitrepo.</p> required <p>Methods:</p> Name Description <code>__repr__</code> <p>Return a developer-friendly string representation of the GitRepo.</p> <code>__eq__</code> <p>Compare this GitRepo with another object for equality based on name.</p> <code>save</code> <p>Clone the repository and check out the specific commit.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepo(name)","title":"<code>name</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepo(url)","title":"<code>url</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepo(commit)","title":"<code>commit</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepo(size)","title":"<code>size</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepo(cwes)","title":"<code>cwes</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepo(files)","title":"<code>files</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepo(has_vuln)","title":"<code>has_vuln</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepo.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepo.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url = url\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepo.commit","title":"commit  <code>instance-attribute</code>","text":"<pre><code>commit = commit\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepo.size","title":"size  <code>instance-attribute</code>","text":"<pre><code>size = size\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepo.cwes","title":"cwes  <code>instance-attribute</code>","text":"<pre><code>cwes = cwes\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepo.files","title":"files  <code>instance-attribute</code>","text":"<pre><code>files = files\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepo.has_vuln","title":"has_vuln  <code>instance-attribute</code>","text":"<pre><code>has_vuln = has_vuln\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepo.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a developer-friendly string representation of the GitRepo.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string showing the repo's name, URL, commit, size, CWEs, and files.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepo.__eq__","title":"__eq__","text":"<pre><code>__eq__(other: str | Self) -&gt; bool\n</code></pre> <p>Compare this GitRepo with another object for equality based on name.</p> <p>Parameters:</p> Name Type Description Default <code>str | Self</code> <p>The object to compare with. Can be a string (repo name) or    another GitRepo instance.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the names are equal, False otherwise.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepo.__eq__(other)","title":"<code>other</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepo.save","title":"save","text":"<pre><code>save(dir: Path) -&gt; None\n</code></pre> <p>Clone the repository and check out the specific commit.</p> <p>Parameters:</p> Name Type Description Default <code>Path</code> <p>The path to the directory where the repository should be cloned.</p> required"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepo.save(dir)","title":"<code>dir</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepoDataset","title":"GitRepoDataset","text":"<pre><code>GitRepoDataset(lang: str)\n</code></pre> <p>               Bases: <code>Dataset</code></p> <p>Abstract base class for datasets composed of Git repositories.</p> <p>Attributes:</p> Name Type Description <code>directory</code> <code>Path</code> <p>The directory path for the dataset.</p> <code>lang</code> <code>str</code> <p>The programming language of the dataset.</p> <code>full_name</code> <code>str</code> <p>The full name of the dataset, including the language.</p> <code>repos</code> <code>list[GitRepo]</code> <p>A list of <code>GitRepo</code> objects loaded from the dataset.</p> <code>max_repo_size</code> <code>int</code> <p>The maximum repository size to consider for analysis.</p> <p>Initialize a GitRepoDataset instance.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The programming language of the dataset to load.</p> required <p>Methods:</p> Name Description <code>validate</code> <p>Validate SAST analysis results against the ground truth of the dataset.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepoDataset(lang)","title":"<code>lang</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepoDataset.repos","title":"repos  <code>instance-attribute</code>","text":"<pre><code>repos: list[GitRepo] = self.files\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepoDataset.max_repo_size","title":"max_repo_size  <code>instance-attribute</code>","text":"<pre><code>max_repo_size: int\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepoDataset.validate","title":"validate","text":"<pre><code>validate(\n    analysis_results: list[AnalysisResult],\n) -&gt; GitRepoDatasetData\n</code></pre> <p>Validate SAST analysis results against the ground truth of the dataset.</p> <p>Compare the defects found by a SAST tool for each repository with the known vulnerabilities (CWEs and file locations) in the dataset to categorize them as true positives, false positives, and false negatives. Each unique (file, CWE) pair is counted once per repository.</p> <p>Parameters:</p> Name Type Description Default <code>list[AnalysisResult]</code> <p>A list of analysis results, one for each repository.</p> required <p>Returns:</p> Type Description <code>GitRepoDatasetData</code> <p>A <code>GitRepoDatasetData</code> object containing the validation metrics.</p>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepoDataset.validate(analysis_results)","title":"<code>analysis_results</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepoDatasetData","title":"GitRepoDatasetData","text":"<pre><code>GitRepoDatasetData(\n    dataset: GitRepoDataset,\n    validated_repos: list[dict],\n    total_repo_number: int,\n    defect_numbers: int,\n)\n</code></pre> <p>               Bases: <code>BenchmarkData</code></p> <p>Store the results of validating an analysis against a GitRepoDataset.</p> <p>Attributes:</p> Name Type Description <code>dataset</code> <code>GitRepoDataset</code> <p>The dataset used for the benchmark.</p> <code>validated_repos</code> <code>list[dict]</code> <p>A list of dictionaries, each containing the validation results for a single repository.</p> <code>total_repo_number</code> <code>int</code> <p>The total number of repositories in the dataset.</p> <code>defect_numbers</code> <code>int</code> <p>The total number of defects found across all repos.</p> <p>Initialize a GitRepoDatasetData instance.</p> <p>Parameters:</p> Name Type Description Default <code>GitRepoDataset</code> <p>The dataset used for the benchmark.</p> required <code>list[dict]</code> <p>A list of validation results per repository.</p> required <code>int</code> <p>The total number of repositories in the dataset.</p> required <code>int</code> <p>The total number of defects found by the analysis.</p> required"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepoDatasetData(dataset)","title":"<code>dataset</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepoDatasetData(validated_repos)","title":"<code>validated_repos</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepoDatasetData(total_repo_number)","title":"<code>total_repo_number</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepoDatasetData(defect_numbers)","title":"<code>defect_numbers</code>","text":""},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepoDatasetData.dataset","title":"dataset  <code>instance-attribute</code>","text":"<pre><code>dataset = dataset\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepoDatasetData.validated_repos","title":"validated_repos  <code>instance-attribute</code>","text":"<pre><code>validated_repos = validated_repos\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepoDatasetData.total_repo_number","title":"total_repo_number  <code>instance-attribute</code>","text":"<pre><code>total_repo_number = total_repo_number\n</code></pre>"},{"location":"api/dataset.html#codesectools.datasets.core.dataset.GitRepoDatasetData.defect_numbers","title":"defect_numbers  <code>instance-attribute</code>","text":"<pre><code>defect_numbers = defect_numbers\n</code></pre>"},{"location":"api/sast.html","title":"SAST Tools","text":""},{"location":"api/sast.html#codesectools.sasts.core","title":"codesectools.sasts.core","text":"<p>Initializes the core SAST module.</p> <p>Modules:</p> Name Description <code>cli</code> <p>Provides a factory for building command-line interfaces for SAST tools.</p> <code>graphics</code> <p>Provides classes for generating plots and visualizations from analysis results.</p> <code>parser</code> <p>Defines the core abstract classes for parsing SAST tool results.</p> <code>sast</code> <p>Defines the core abstract class and logic for SAST tool integrations.</p>"},{"location":"api/sast.html#codesectools.sasts.core.cli","title":"cli","text":"<p>Provides a factory for building command-line interfaces for SAST tools.</p> <p>This module contains the <code>CLIFactory</code> class, which simplifies the creation of standardized <code>typer</code> CLI commands (analyze, benchmark, list, plot) for any SAST integration.</p>"},{"location":"api/sast.html#codesectools.sasts.core.cli.CLIFactory","title":"CLIFactory","text":"<pre><code>CLIFactory(sast: SAST, custom_messages: dict)\n</code></pre> <p>Provide a factory to generate a standard set of CLI commands for a SAST tool.</p> <p>Attributes:</p> Name Type Description <code>cli</code> <code>typer.Typer</code> <p>The <code>typer</code> application to which commands will be added.</p> <code>sast</code> <code>SAST</code> <p>The SAST tool instance for which the CLI is being built.</p> <code>help_messages</code> <code>dict</code> <p>A dictionary of help messages for the standard commands.</p> <p>Initialize the CLIFactory.</p> <p>Parameters:</p> Name Type Description Default <code>SAST</code> <p>An instance of the SAST tool's implementation class.</p> required <code>dict</code> <p>A dictionary of custom help messages to override the defaults.</p> required <p>Methods:</p> Name Description <code>build_cli</code> <p>Build and return the Typer CLI application for the SAST tool.</p> <code>add_main</code> <p>Add the main callback command to the CLI.</p> <code>add_install</code> <p>Add the 'install' command to the CLI.</p> <code>add_analyze</code> <p>Add the 'analyze' command to the CLI.</p> <code>add_benchmark</code> <p>Add the 'benchmark' command to the CLI.</p> <code>add_list</code> <p>Add the 'list' command to the CLI.</p> <code>add_plot</code> <p>Add the 'plot' command to the CLI.</p>"},{"location":"api/sast.html#codesectools.sasts.core.cli.CLIFactory(sast)","title":"<code>sast</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.cli.CLIFactory(custom_messages)","title":"<code>custom_messages</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.cli.CLIFactory.sast","title":"sast  <code>instance-attribute</code>","text":"<pre><code>sast = sast\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.cli.CLIFactory.help_messages","title":"help_messages  <code>instance-attribute</code>","text":"<pre><code>help_messages = {\n    \"main\": f\"{sast.name}\",\n    \"install\": \"List instruction to install missing requirements.\",\n    \"analyze\": f\"Analyze a project using {sast.name}.\",\n    \"benchmark\": f\"Benchmark a dataset using {sast.name}.\",\n    \"list\": \"List existing analysis results.\",\n    \"plot\": \"Generate plot for results visualization.\",\n}\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.cli.CLIFactory.build_cli","title":"build_cli","text":"<pre><code>build_cli() -&gt; typer.Typer\n</code></pre> <p>Build and return the Typer CLI application for the SAST tool.</p>"},{"location":"api/sast.html#codesectools.sasts.core.cli.CLIFactory.add_main","title":"add_main","text":"<pre><code>add_main(help: str = '') -&gt; None\n</code></pre> <p>Add the main callback command to the CLI.</p> <p>This function sets up the main callback that runs when the SAST-specific command is invoked without a subcommand.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The help string for the main command.</p> <code>''</code>"},{"location":"api/sast.html#codesectools.sasts.core.cli.CLIFactory.add_main(help)","title":"<code>help</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.cli.CLIFactory.add_install","title":"add_install","text":"<pre><code>add_install(help: str = '') -&gt; None\n</code></pre> <p>Add the 'install' command to the CLI.</p> <p>This command opens the tool's installation guide URL in a web browser.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The help string for the command.</p> <code>''</code>"},{"location":"api/sast.html#codesectools.sasts.core.cli.CLIFactory.add_install(help)","title":"<code>help</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.cli.CLIFactory.add_analyze","title":"add_analyze","text":"<pre><code>add_analyze(help: str = '') -&gt; None\n</code></pre> <p>Add the 'analyze' command to the CLI.</p> <p>This command runs the SAST tool on the current directory.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The help string for the command.</p> <code>''</code>"},{"location":"api/sast.html#codesectools.sasts.core.cli.CLIFactory.add_analyze(help)","title":"<code>help</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.cli.CLIFactory.add_benchmark","title":"add_benchmark","text":"<pre><code>add_benchmark(help: str = '') -&gt; None\n</code></pre> <p>Add the 'benchmark' command to the CLI.</p> <p>This command runs the SAST tool against a specified dataset.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The help string for the command.</p> <code>''</code>"},{"location":"api/sast.html#codesectools.sasts.core.cli.CLIFactory.add_benchmark(help)","title":"<code>help</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.cli.CLIFactory.add_list","title":"add_list","text":"<pre><code>add_list(help: str = '') -&gt; None\n</code></pre> <p>Add the 'list' command to the CLI.</p> <p>This command lists all available analysis results for the SAST tool.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The help string for the command.</p> <code>''</code>"},{"location":"api/sast.html#codesectools.sasts.core.cli.CLIFactory.add_list(help)","title":"<code>help</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.cli.CLIFactory.add_plot","title":"add_plot","text":"<pre><code>add_plot(help: str = '') -&gt; None\n</code></pre> <p>Add the 'plot' command to the CLI.</p> <p>This command generates visualizations from analysis or benchmark results.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The help string for the command.</p> <code>''</code>"},{"location":"api/sast.html#codesectools.sasts.core.cli.CLIFactory.add_plot(help)","title":"<code>help</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.graphics","title":"graphics","text":"<p>Provides classes for generating plots and visualizations from analysis results.</p> <p>This module contains base and specific graphics classes that use Matplotlib to create visual representations of SAST analysis data, such as defect distributions and benchmark performance.</p>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.Graphics","title":"Graphics","text":"<pre><code>Graphics(sast: SAST, project_name: str)\n</code></pre> <p>Base class for generating graphics from SAST results.</p> <p>Attributes:</p> Name Type Description <code>sast</code> <code>SAST</code> <p>The SAST tool instance.</p> <code>output_dir</code> <code>Path</code> <p>The directory containing the analysis results.</p> <code>color_mapping</code> <code>dict</code> <p>A mapping of categories to colors for plotting.</p> <code>plot_functions</code> <code>list</code> <p>A list of methods that generate plots.</p> <code>limit</code> <code>int</code> <p>The maximum number of items to show in top-N plots.</p> <code>has_latex</code> <code>bool</code> <p>True if a LaTeX installation is found.</p> <p>Initialize the Graphics object.</p> <p>Parameters:</p> Name Type Description Default <code>SAST</code> <p>The SAST tool instance.</p> required <code>str</code> <p>The name of the project or dataset being visualized.</p> required <p>Methods:</p> Name Description <code>export</code> <p>Generate, save, and optionally display all registered plots.</p>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.Graphics(sast)","title":"<code>sast</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.graphics.Graphics(project_name)","title":"<code>project_name</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.graphics.Graphics.sast","title":"sast  <code>instance-attribute</code>","text":"<pre><code>sast = sast\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.Graphics.output_dir","title":"output_dir  <code>instance-attribute</code>","text":"<pre><code>output_dir = sast.output_dir / project_name\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.Graphics.color_mapping","title":"color_mapping  <code>instance-attribute</code>","text":"<pre><code>color_mapping = sast.color_mapping\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.Graphics.plot_functions","title":"plot_functions  <code>instance-attribute</code>","text":"<pre><code>plot_functions = []\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.Graphics.limit","title":"limit  <code>instance-attribute</code>","text":"<pre><code>limit = 10\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.Graphics.has_latex","title":"has_latex  <code>instance-attribute</code>","text":"<pre><code>has_latex = shutil.which('pdflatex')\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.Graphics.export","title":"export","text":"<pre><code>export(overwrite: bool, pgf: bool, show: bool) -&gt; None\n</code></pre> <p>Generate, save, and optionally display all registered plots.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <p>If True, overwrite existing figure files.</p> required <code>bool</code> <p>If True and LaTeX is available, export figures in PGF format.</p> required <code>bool</code> <p>If True, open the generated figures using the default viewer.</p> required"},{"location":"api/sast.html#codesectools.sasts.core.graphics.Graphics.export(overwrite)","title":"<code>overwrite</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.graphics.Graphics.export(pgf)","title":"<code>pgf</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.graphics.Graphics.export(show)","title":"<code>show</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.graphics.ProjectGraphics","title":"ProjectGraphics","text":"<pre><code>ProjectGraphics(sast: SAST, project_name: str)\n</code></pre> <p>               Bases: <code>Graphics</code></p> <p>Generate graphics for a single project analysis result.</p> <p>Attributes:</p> Name Type Description <code>result</code> <code>AnalysisResult</code> <p>The loaded analysis result data.</p> <p>Initialize the ProjectGraphics object.</p> <p>Parameters:</p> Name Type Description Default <code>SAST</code> <p>The SAST tool instance.</p> required <code>str</code> <p>The name of the project.</p> required <p>Methods:</p> Name Description <code>checker_to_category</code> <p>Map a checker name to its category.</p> <code>plot_overview</code> <p>Generate an overview plot with stats by files, checkers, and categories.</p>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.ProjectGraphics(sast)","title":"<code>sast</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.graphics.ProjectGraphics(project_name)","title":"<code>project_name</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.graphics.ProjectGraphics.result","title":"result  <code>instance-attribute</code>","text":"<pre><code>result = sast.parser.load_from_output_dir(self.output_dir)\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.ProjectGraphics.checker_to_category","title":"checker_to_category","text":"<pre><code>checker_to_category(checker: str) -&gt; str\n</code></pre> <p>Map a checker name to its category.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the checker.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The category string for the checker, or \"NONE\" if not found.</p>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.ProjectGraphics.checker_to_category(checker)","title":"<code>checker</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.graphics.ProjectGraphics.plot_overview","title":"plot_overview","text":"<pre><code>plot_overview() -&gt; Figure\n</code></pre> <p>Generate an overview plot with stats by files, checkers, and categories.</p> <p>Returns:</p> Type Description <code>Figure</code> <p>A Matplotlib Figure object containing the plots.</p>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.FileDatasetGraphics","title":"FileDatasetGraphics","text":"<pre><code>FileDatasetGraphics(sast: SAST, dataset: FileDataset)\n</code></pre> <p>               Bases: <code>ProjectGraphics</code></p> <p>Generate graphics for a file-based dataset benchmark result.</p> <p>Attributes:</p> Name Type Description <code>dataset</code> <code>FileDataset</code> <p>The dataset instance used for the benchmark.</p> <code>benchmark_data</code> <code>FileDatasetData</code> <p>The validated benchmark data.</p> <p>Initialize the FileDatasetGraphics object.</p> <p>Parameters:</p> Name Type Description Default <code>SAST</code> <p>The SAST tool instance.</p> required <code>FileDataset</code> <p>The file-based dataset that was benchmarked.</p> required <p>Methods:</p> Name Description <code>plot_top_cwes</code> <p>Generate a plot showing the top predicted CWEs.</p>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.FileDatasetGraphics(sast)","title":"<code>sast</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.graphics.FileDatasetGraphics(dataset)","title":"<code>dataset</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.graphics.FileDatasetGraphics.dataset","title":"dataset  <code>instance-attribute</code>","text":"<pre><code>dataset = dataset\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.FileDatasetGraphics.benchmark_data","title":"benchmark_data  <code>instance-attribute</code>","text":"<pre><code>benchmark_data = self.dataset.validate(self.result)\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.FileDatasetGraphics.plot_top_cwes","title":"plot_top_cwes","text":"<pre><code>plot_top_cwes() -&gt; Figure\n</code></pre> <p>Generate a plot showing the top predicted CWEs.</p> <p>Returns:</p> Type Description <code>Figure</code> <p>A Matplotlib Figure object containing the plot.</p>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.GitRepoDatasetGraphics","title":"GitRepoDatasetGraphics","text":"<pre><code>GitRepoDatasetGraphics(sast: SAST, dataset: GitRepoDataset)\n</code></pre> <p>               Bases: <code>Graphics</code></p> <p>Generate graphics for a Git repository-based dataset benchmark result.</p> <p>Attributes:</p> Name Type Description <code>dataset</code> <code>GitRepoDataset</code> <p>The dataset instance used for the benchmark.</p> <code>results</code> <code>list[AnalysisResult]</code> <p>A list of loaded analysis results.</p> <code>benchmark_data</code> <code>GitRepoDatasetData</code> <p>The validated benchmark data.</p> <p>Initialize the GitRepoDatasetGraphics object.</p> <p>Parameters:</p> Name Type Description Default <code>SAST</code> <p>The SAST tool instance.</p> required <code>GitRepoDataset</code> <p>The Git repository-based dataset that was benchmarked.</p> required <p>Methods:</p> Name Description <code>checker_to_category</code> <p>Map a checker name to its category.</p> <code>plot_overview</code> <p>Generate an overview plot classifying defects.</p> <code>plot_top_cwes</code> <p>Generate a plot showing the top predicted CWEs.</p> <code>plot_defects_per_loc</code> <p>Generate a scatter plot of defects found versus lines of code.</p> <code>plot_time_per_loc</code> <p>Generate a scatter plot of analysis time versus lines of code.</p>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.GitRepoDatasetGraphics(sast)","title":"<code>sast</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.graphics.GitRepoDatasetGraphics(dataset)","title":"<code>dataset</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.graphics.GitRepoDatasetGraphics.dataset","title":"dataset  <code>instance-attribute</code>","text":"<pre><code>dataset = dataset\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.GitRepoDatasetGraphics.results","title":"results  <code>instance-attribute</code>","text":"<pre><code>results = sast.parser.load_from_output_dirs(repo_paths)\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.GitRepoDatasetGraphics.benchmark_data","title":"benchmark_data  <code>instance-attribute</code>","text":"<pre><code>benchmark_data = self.dataset.validate(self.results)\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.GitRepoDatasetGraphics.checker_to_category","title":"checker_to_category","text":"<pre><code>checker_to_category(checker: str) -&gt; str\n</code></pre> <p>Map a checker name to its category.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the checker.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The category string for the checker, or \"NONE\" if not found.</p>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.GitRepoDatasetGraphics.checker_to_category(checker)","title":"<code>checker</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.graphics.GitRepoDatasetGraphics.plot_overview","title":"plot_overview","text":"<pre><code>plot_overview() -&gt; Figure\n</code></pre> <p>Generate an overview plot classifying defects.</p> <p>Returns:</p> Type Description <code>Figure</code> <p>A Matplotlib Figure object containing the plot.</p>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.GitRepoDatasetGraphics.plot_top_cwes","title":"plot_top_cwes","text":"<pre><code>plot_top_cwes() -&gt; Figure\n</code></pre> <p>Generate a plot showing the top predicted CWEs.</p> <p>Returns:</p> Type Description <code>Figure</code> <p>A Matplotlib Figure object containing the plot.</p>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.GitRepoDatasetGraphics.plot_defects_per_loc","title":"plot_defects_per_loc","text":"<pre><code>plot_defects_per_loc() -&gt; Figure\n</code></pre> <p>Generate a scatter plot of defects found versus lines of code.</p> <p>Returns:</p> Type Description <code>Figure</code> <p>A Matplotlib Figure object containing the plot.</p>"},{"location":"api/sast.html#codesectools.sasts.core.graphics.GitRepoDatasetGraphics.plot_time_per_loc","title":"plot_time_per_loc","text":"<pre><code>plot_time_per_loc() -&gt; Figure\n</code></pre> <p>Generate a scatter plot of analysis time versus lines of code.</p> <p>Returns:</p> Type Description <code>Figure</code> <p>A Matplotlib Figure object containing the plot.</p>"},{"location":"api/sast.html#codesectools.sasts.core.parser","title":"parser","text":"<p>Defines the core abstract classes for parsing SAST tool results.</p> <p>This module provides the <code>Defect</code> and <code>AnalysisResult</code> classes, which serve as standardized data structures for holding information about vulnerabilities and the overall analysis process. Each SAST integration must implement a concrete subclass of <code>AnalysisResult</code> to parse its specific output format.</p>"},{"location":"api/sast.html#codesectools.sasts.core.parser.Defect","title":"Defect","text":"<pre><code>Defect(\n    filepath: Path,\n    checker: str,\n    category: str,\n    cwe: CWE,\n    message: str,\n    location: tuple[int] | None,\n    data: tuple[Any],\n)\n</code></pre> <p>Represent a single defect or finding reported by a SAST tool.</p> <p>Attributes:</p> Name Type Description <code>sast</code> <code>str</code> <p>The name of the SAST tool that reported the defect.</p> <code>filepath</code> <code>Path</code> <p>The path to the file where the defect was found.</p> <code>filepath_str</code> <code>str</code> <p>The string representation of the file path.</p> <code>filename</code> <code>str</code> <p>The name of the file.</p> <code>checker</code> <code>str</code> <p>The name of the checker or rule that reported the defect.</p> <code>category</code> <code>str</code> <p>The category of the checker (e.g., security, performance).</p> <code>cwe</code> <code>CWE</code> <p>The CWE associated with the defect.</p> <code>message</code> <code>str</code> <p>The description of the defect.</p> <code>location</code> <code>tuple[int, int] | None</code> <p>A tuple with the start and end line numbers of the defect.</p> <code>data</code> <code>tuple[Any]</code> <p>Raw data from the SAST tool for this defect.</p> <p>Initialize a Defect instance.</p> <p>Parameters:</p> Name Type Description Default <code>Path</code> <p>The file path of the defect.</p> required <code>str</code> <p>The name of the rule/checker.</p> required <code>str</code> <p>The category of the checker.</p> required <code>CWE</code> <p>The CWE associated with the defect.</p> required <code>str</code> <p>The description of the defect.</p> required <code>tuple[int] | None</code> <p>A tuple with start and end line numbers of the defect, or None.</p> required <code>tuple[Any]</code> <p>Raw data from the SAST tool for this defect.</p> required <p>Methods:</p> Name Description <code>__repr__</code> <p>Return a developer-friendly string representation of the Defect.</p>"},{"location":"api/sast.html#codesectools.sasts.core.parser.Defect(filepath)","title":"<code>filepath</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.parser.Defect(checker)","title":"<code>checker</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.parser.Defect(category)","title":"<code>category</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.parser.Defect(cwe)","title":"<code>cwe</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.parser.Defect(message)","title":"<code>message</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.parser.Defect(location)","title":"<code>location</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.parser.Defect(data)","title":"<code>data</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.parser.Defect.sast","title":"sast  <code>instance-attribute</code>","text":"<pre><code>sast: str\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.parser.Defect.filepath","title":"filepath  <code>instance-attribute</code>","text":"<pre><code>filepath = filepath\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.parser.Defect.filepath_str","title":"filepath_str  <code>instance-attribute</code>","text":"<pre><code>filepath_str = str(filepath)\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.parser.Defect.filename","title":"filename  <code>instance-attribute</code>","text":"<pre><code>filename = filepath.name\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.parser.Defect.checker","title":"checker  <code>instance-attribute</code>","text":"<pre><code>checker = checker\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.parser.Defect.category","title":"category  <code>instance-attribute</code>","text":"<pre><code>category = category\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.parser.Defect.cwe","title":"cwe  <code>instance-attribute</code>","text":"<pre><code>cwe = cwe\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.parser.Defect.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message = message\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.parser.Defect.location","title":"location  <code>instance-attribute</code>","text":"<pre><code>location = location\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.parser.Defect.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data = data\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.parser.Defect.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a developer-friendly string representation of the Defect.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string showing the class name and key attributes of the defect.</p>"},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult","title":"AnalysisResult","text":"<pre><code>AnalysisResult(\n    name: str,\n    source_path: Path,\n    lang: str,\n    files: list[str],\n    defects: list[Defect],\n    time: float,\n    loc: int,\n    data: tuple[Any],\n)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract base class for holding the parsed results of a SAST analysis.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the analyzed project or dataset.</p> <code>source_path</code> <code>Path</code> <p>The path to the analyzed source code.</p> <code>lang</code> <code>str</code> <p>The primary programming language analyzed.</p> <code>files</code> <code>list[str]</code> <p>A list of files that were analyzed.</p> <code>defects</code> <code>list[Defect]</code> <p>A list of <code>Defect</code> objects found.</p> <code>time</code> <code>float</code> <p>The duration of the analysis in seconds.</p> <code>loc</code> <code>int</code> <p>The number of lines of code analyzed.</p> <code>data</code> <code>tuple[Any]</code> <p>Raw data from the SAST tool's output.</p> <p>Initialize an AnalysisResult instance.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the analyzed project/dataset.</p> required <code>Path</code> <p>The path to the analyzed source code.</p> required <code>str</code> <p>The programming language of the code.</p> required <code>list[str]</code> <p>A list of analyzed files.</p> required <code>list[Defect]</code> <p>A list of <code>Defect</code> objects.</p> required <code>float</code> <p>The analysis duration in seconds.</p> required <code>int</code> <p>The lines of code analyzed.</p> required <code>tuple[Any]</code> <p>Raw data from the SAST tool's output.</p> required <p>Methods:</p> Name Description <code>__repr__</code> <p>Return a developer-friendly string representation of the AnalysisResult.</p> <code>load_from_output_dir</code> <p>Load and parse analysis results from a specified directory.</p> <code>load_from_output_dirs</code> <p>Load and parse analysis results from multiple directories.</p> <code>checker_to_category</code> <p>Get the category for a given checker name.</p> <code>stats_by_checkers</code> <p>Calculate statistics on defects, grouped by checker.</p> <code>stats_by_categories</code> <p>Calculate statistics on defects, grouped by category.</p> <code>stats_by_files</code> <p>Calculate statistics on defects, grouped by file.</p> <code>stats_by_cwes</code> <p>Calculate statistics on defects, grouped by CWE ID.</p>"},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult(name)","title":"<code>name</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult(source_path)","title":"<code>source_path</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult(lang)","title":"<code>lang</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult(files)","title":"<code>files</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult(defects)","title":"<code>defects</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult(time)","title":"<code>time</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult(loc)","title":"<code>loc</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult(data)","title":"<code>data</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult.source_path","title":"source_path  <code>instance-attribute</code>","text":"<pre><code>source_path = source_path\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult.lang","title":"lang  <code>instance-attribute</code>","text":"<pre><code>lang = lang\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult.files","title":"files  <code>instance-attribute</code>","text":"<pre><code>files = files\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult.defects","title":"defects  <code>instance-attribute</code>","text":"<pre><code>defects = defects\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult.time","title":"time  <code>instance-attribute</code>","text":"<pre><code>time = time\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult.loc","title":"loc  <code>instance-attribute</code>","text":"<pre><code>loc = loc\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data = data\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a developer-friendly string representation of the AnalysisResult.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string showing key metrics of the analysis.</p>"},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult.load_from_output_dir","title":"load_from_output_dir  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>load_from_output_dir(output_dir: Path) -&gt; Self\n</code></pre> <p>Load and parse analysis results from a specified directory.</p> <p>This method must be implemented by subclasses to handle the specific output files of a SAST tool.</p> <p>Parameters:</p> Name Type Description Default <code>Path</code> <p>The directory containing the raw analysis output files.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>An instance of the <code>AnalysisResult</code> subclass.</p>"},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult.load_from_output_dir(output_dir)","title":"<code>output_dir</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult.load_from_output_dirs","title":"load_from_output_dirs  <code>classmethod</code>","text":"<pre><code>load_from_output_dirs(output_dirs: list[str]) -&gt; list[Self]\n</code></pre> <p>Load and parse analysis results from multiple directories.</p> <p>Parameters:</p> Name Type Description Default <code>list[str]</code> <p>An iterable of directory paths containing results.</p> required <p>Returns:</p> Type Description <code>list[Self]</code> <p>A list of <code>AnalysisResult</code> subclass instances.</p>"},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult.load_from_output_dirs(output_dirs)","title":"<code>output_dirs</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult.checker_to_category","title":"checker_to_category","text":"<pre><code>checker_to_category(checker: str) -&gt; str\n</code></pre> <p>Get the category for a given checker name.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the checker.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The category string, or \"NONE\" if not found.</p>"},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult.checker_to_category(checker)","title":"<code>checker</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult.stats_by_checkers","title":"stats_by_checkers","text":"<pre><code>stats_by_checkers() -&gt; dict\n</code></pre> <p>Calculate statistics on defects, grouped by checker.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary where keys are checker names and values are dicts</p> <code>dict</code> <p>containing defect counts and affected files.</p>"},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult.stats_by_categories","title":"stats_by_categories","text":"<pre><code>stats_by_categories() -&gt; dict\n</code></pre> <p>Calculate statistics on defects, grouped by category.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary where keys are category names and values are dicts</p> <code>dict</code> <p>containing counts and checker lists.</p>"},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult.stats_by_files","title":"stats_by_files","text":"<pre><code>stats_by_files() -&gt; dict\n</code></pre> <p>Calculate statistics on defects, grouped by file.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary where keys are filenames and values are dicts</p> <code>dict</code> <p>containing defect counts and the checkers that fired.</p>"},{"location":"api/sast.html#codesectools.sasts.core.parser.AnalysisResult.stats_by_cwes","title":"stats_by_cwes","text":"<pre><code>stats_by_cwes() -&gt; dict\n</code></pre> <p>Calculate statistics on defects, grouped by CWE ID.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary where keys are CWE IDs and values are dicts</p> <code>dict</code> <p>containing defect counts and affected files.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast","title":"sast","text":"<p>Defines the core abstract class and logic for SAST tool integrations.</p> <p>This module provides the <code>SAST</code> abstract base class, which outlines the common interface for running a static analysis tool, saving its results, and performing benchmarks against datasets.</p> <p>Modules:</p> Name Description <code>properties</code> <p>Define properties for SAST tool integrations.</p> <code>requirements</code> <p>Define requirements for SAST tools and their fulfillment status.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST","title":"SAST","text":"<pre><code>SAST()\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract base class for a SAST tool integration.</p> <p>Subclasses of this abstract class must define various class attributes to configure the integration with a specific SAST tool.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the SAST tool.</p> <code>supported_languages</code> <code>list[str]</code> <p>A list of supported programming languages.</p> <code>supported_dataset_names</code> <code>list[str]</code> <p>Names of compatible datasets.</p> <code>supported_datasets</code> <code>list[Dataset]</code> <p>A list of supported dataset classes.</p> <code>properties</code> <code>SASTProperties</code> <p>The properties of the SAST tool.</p> <code>requirements</code> <code>SASTRequirements</code> <p>The requirements for the SAST tool.</p> <code>commands</code> <code>list[list[str]]</code> <p>Command-line templates to be executed.</p> <code>valid_codes</code> <code>list[int]</code> <p>A list of exit codes indicating that the command did not fail.</p> <code>environ</code> <code>dict[str, str]</code> <p>Environment variables to set for commands.</p> <code>output_files</code> <code>list[tuple[Path, bool]]</code> <p>Expected output files and whether they are required.</p> <code>parser</code> <code>type[AnalysisResult]</code> <p>The parser class for the tool's results.</p> <code>color_mapping</code> <code>dict</code> <p>A mapping of result categories to colors for plotting.</p> <code>install_help</code> <code>str | None</code> <p>An optional string with installation help.</p> <code>output_dir</code> <code>Path</code> <p>(Instance attribute) The base directory for storing analysis results.</p> <code>status</code> <code>str</code> <p>(Instance attribute) The operational status ('full', 'partial', or 'none') determined by fulfilled requirements.</p> <code>missing</code> <code>list</code> <p>(Instance attribute) A list of unfulfilled requirements for the tool.</p> <p>Initialize the SAST instance.</p> <p>Set up supported datasets, the output directory, and requirement status.</p> <p>Methods:</p> Name Description <code>render_command</code> <p>Render a command template by replacing placeholders with values.</p> <code>run_analysis</code> <p>Run the SAST analysis on a given project directory.</p> <code>save_results</code> <p>Save the results of a SAST analysis.</p> <code>analyze_files</code> <p>Analyze a dataset composed of individual files.</p> <code>analyze_repos</code> <p>Analyze a dataset composed of Git repositories.</p> <code>list_results</code> <p>List the names of available analysis results.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.supported_languages","title":"supported_languages  <code>instance-attribute</code>","text":"<pre><code>supported_languages: list[str]\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.supported_dataset_names","title":"supported_dataset_names  <code>instance-attribute</code>","text":"<pre><code>supported_dataset_names: list[str]\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.properties","title":"properties  <code>instance-attribute</code>","text":"<pre><code>properties: SASTProperties\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.requirements","title":"requirements  <code>instance-attribute</code>","text":"<pre><code>requirements: SASTRequirements\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.commands","title":"commands  <code>instance-attribute</code>","text":"<pre><code>commands: list[list[str]]\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.valid_codes","title":"valid_codes  <code>instance-attribute</code>","text":"<pre><code>valid_codes: list[int]\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.environ","title":"environ  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>environ: dict[str, str] = {}\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.output_files","title":"output_files  <code>instance-attribute</code>","text":"<pre><code>output_files: list[tuple[Path, bool]]\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.parser","title":"parser  <code>instance-attribute</code>","text":"<pre><code>parser: AnalysisResult\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.color_mapping","title":"color_mapping  <code>instance-attribute</code>","text":"<pre><code>color_mapping: dict\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.install_help","title":"install_help  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>install_help: str | None = None\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.supported_datasets","title":"supported_datasets  <code>instance-attribute</code>","text":"<pre><code>supported_datasets: list[Dataset] = [\n    (DATASETS_ALL[d])\n    for d in (self.supported_dataset_names)\n]\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.output_dir","title":"output_dir  <code>instance-attribute</code>","text":"<pre><code>output_dir = USER_OUTPUT_DIR / self.name\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status = self.requirements.get_status()\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.missing","title":"missing  <code>instance-attribute</code>","text":"<pre><code>missing = self.requirements.get_missing()\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.supported_dataset_full_names","title":"supported_dataset_full_names  <code>property</code>","text":"<pre><code>supported_dataset_full_names: list[str]\n</code></pre> <p>List all language-specific datasets supported by this SAST tool.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>A list of dataset name strings (e.g., \"MyDataset_java\").</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.render_command","title":"render_command","text":"<pre><code>render_command(\n    command: list[str], map: dict[str, str]\n) -&gt; list[str]\n</code></pre> <p>Render a command template by replacing placeholders with values.</p> <p>Parameters:</p> Name Type Description Default <code>list[str]</code> <p>The command template as a list of strings.</p> required <code>dict[str, str]</code> <p>A dictionary of placeholders to their replacement values.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>The rendered command as a list of strings.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.render_command(command)","title":"<code>command</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.render_command(map)","title":"<code>map</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.run_analysis","title":"run_analysis","text":"<pre><code>run_analysis(\n    lang: str,\n    project_dir: Path,\n    output_dir: Path,\n    **kwargs: Any,\n) -&gt; None\n</code></pre> <p>Run the SAST analysis on a given project directory.</p> <p>Execute the tool's commands, time the analysis, calculate LoC, and save the results.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The programming language of the project.</p> required <code>Path</code> <p>The path to the project's source code.</p> required <code>Path</code> <p>The path to save the analysis results.</p> required <code>Any</code> <p>Additional tool-specific arguments.</p> <code>{}</code>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.run_analysis(lang)","title":"<code>lang</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.run_analysis(project_dir)","title":"<code>project_dir</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.run_analysis(output_dir)","title":"<code>output_dir</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.run_analysis(**kwargs)","title":"<code>**kwargs</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.save_results","title":"save_results","text":"<pre><code>save_results(\n    project_dir: Path, output_dir: Path, extra: dict\n) -&gt; None\n</code></pre> <p>Save the results of a SAST analysis.</p> <p>Copy the tool's output files and save any extra metadata to the result directory.</p> <p>Parameters:</p> Name Type Description Default <code>Path</code> <p>The directory where the analysis was run.</p> required <code>Path</code> <p>The directory where results should be saved.</p> required <code>dict</code> <p>A dictionary of extra metadata to save as JSON.</p> required"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.save_results(project_dir)","title":"<code>project_dir</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.save_results(output_dir)","title":"<code>output_dir</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.save_results(extra)","title":"<code>extra</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.analyze_files","title":"analyze_files","text":"<pre><code>analyze_files(\n    dataset: FileDataset,\n    overwrite: bool = False,\n    testing: bool = False,\n) -&gt; None\n</code></pre> <p>Analyze a dataset composed of individual files.</p> <p>Set up a temporary directory, save the dataset files, run the analysis, and clean up.</p> <p>Parameters:</p> Name Type Description Default <code>FileDataset</code> <p>The <code>FileDataset</code> instance to analyze.</p> required <code>bool</code> <p>If True, overwrite existing results for this dataset.</p> <code>False</code> <code>bool</code> <p>If True, run analysis on a sample of two random files for testing purposes.</p> <code>False</code>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.analyze_files(dataset)","title":"<code>dataset</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.analyze_files(overwrite)","title":"<code>overwrite</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.analyze_files(testing)","title":"<code>testing</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.analyze_repos","title":"analyze_repos","text":"<pre><code>analyze_repos(\n    dataset: GitRepoDataset,\n    overwrite: bool = False,\n    testing: bool = False,\n) -&gt; None\n</code></pre> <p>Analyze a dataset composed of Git repositories.</p> <p>Iterate through each repository in the dataset, clone it, check out the specified commit, run the analysis, and save the results.</p> <p>Parameters:</p> Name Type Description Default <code>GitRepoDataset</code> <p>The <code>GitRepoDataset</code> instance to analyze.</p> required <code>bool</code> <p>If True, re-analyze repositories with existing results.</p> <code>False</code> <code>bool</code> <p>If True, run analysis on a sample of two small random repositories for testing purposes.</p> <code>False</code>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.analyze_repos(dataset)","title":"<code>dataset</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.analyze_repos(overwrite)","title":"<code>overwrite</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.analyze_repos(testing)","title":"<code>testing</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.list_results","title":"list_results","text":"<pre><code>list_results(\n    project: bool = False,\n    dataset: bool = False,\n    limit: int | None = None,\n) -&gt; list[str]\n</code></pre> <p>List the names of available analysis results.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <p>If True, include results from local project analyses.</p> <code>False</code> <code>bool</code> <p>If True, include results from dataset benchmarks.</p> <code>False</code> <code>int | None</code> <p>An optional limit on the number of results to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>A sorted list of result directory names.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.list_results(project)","title":"<code>project</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.list_results(dataset)","title":"<code>dataset</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.SAST.list_results(limit)","title":"<code>limit</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.BuildlessSAST","title":"BuildlessSAST","text":"<pre><code>BuildlessSAST()\n</code></pre> <p>               Bases: <code>SAST</code></p> <p>Represent a SAST tool that analyzes source code directly without a build step.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.PrebuiltSAST","title":"PrebuiltSAST","text":"<pre><code>PrebuiltSAST()\n</code></pre> <p>               Bases: <code>SAST</code></p> <p>Represent a SAST tool that requires a pre-built project.</p> <p>Methods:</p> Name Description <code>analyze_files</code> <p>Analyze a pre-built file-based dataset.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.PrebuiltSAST.analyze_files","title":"analyze_files","text":"<pre><code>analyze_files(\n    dataset: PrebuiltFileDataset,\n    overwrite: bool = False,\n    testing: bool = False,\n) -&gt; None\n</code></pre> <p>Analyze a pre-built file-based dataset.</p> <p>Check if the dataset has been built. If not, provide build instructions. Otherwise, run the analysis on the pre-built files.</p> <p>Parameters:</p> Name Type Description Default <code>PrebuiltFileDataset</code> <p>The <code>PrebuiltFileDataset</code> instance to analyze.</p> required <code>bool</code> <p>If True, overwrite existing results for this dataset.</p> <code>False</code> <code>bool</code> <p>If True, run analysis on a sample of two random files for testing.</p> <code>False</code>"},{"location":"api/sast.html#codesectools.sasts.core.sast.PrebuiltSAST.analyze_files(dataset)","title":"<code>dataset</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.PrebuiltSAST.analyze_files(overwrite)","title":"<code>overwrite</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.PrebuiltSAST.analyze_files(testing)","title":"<code>testing</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.properties","title":"properties","text":"<p>Define properties for SAST tool integrations.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.properties.SASTProperties","title":"SASTProperties","text":"<pre><code>SASTProperties(free: bool, offline: bool)\n</code></pre> <p>Represent properties of a SAST tool.</p> <p>Initialize a SASTProperties instance.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <p>A boolean indicating if the tool is free to use.</p> required <code>bool</code> <p>A boolean indicating if the tool can run without an internet connection.</p> required <p>Attributes:</p> Name Type Description <code>free</code> <code>offline</code>"},{"location":"api/sast.html#codesectools.sasts.core.sast.properties.SASTProperties(free)","title":"<code>free</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.properties.SASTProperties(offline)","title":"<code>offline</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.properties.SASTProperties.free","title":"free  <code>instance-attribute</code>","text":"<pre><code>free = free\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.properties.SASTProperties.offline","title":"offline  <code>instance-attribute</code>","text":"<pre><code>offline = offline\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements","title":"requirements","text":"<p>Define requirements for SAST tools and their fulfillment status.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirement","title":"SASTRequirement","text":"<pre><code>SASTRequirement(\n    name: str,\n    depends_on: list[Self] | None = None,\n    instruction: str | None = None,\n    url: str | None = None,\n    doc: bool = False,\n)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Represent a single requirement for a SAST tool to be functional.</p> <p>Initialize a SASTRequirement instance.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the requirement.</p> required <code>list[Self] | None</code> <p>A list of other requirements that must be fulfilled first.</p> <code>None</code> <code>str | None</code> <p>A short instruction on how to download the requirement.</p> <code>None</code> <code>str | None</code> <p>A URL for more detailed instructions.</p> <code>None</code> <code>bool</code> <p>A flag indicating if the instruction is available in the documentation.</p> <code>False</code> <p>Methods:</p> Name Description <code>is_fulfilled</code> <p>Check if the requirement is met.</p> <code>dependencies_fulfilled</code> <p>Check if all dependencies for this requirement are fulfilled.</p> <code>__repr__</code> <p>Return a developer-friendly string representation of the requirement.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>depends_on</code> <code>instruction</code> <code>url</code> <code>doc</code>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirement(name)","title":"<code>name</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirement(depends_on)","title":"<code>depends_on</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirement(instruction)","title":"<code>instruction</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirement(url)","title":"<code>url</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirement(doc)","title":"<code>doc</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirement.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirement.depends_on","title":"depends_on  <code>instance-attribute</code>","text":"<pre><code>depends_on = depends_on\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirement.instruction","title":"instruction  <code>instance-attribute</code>","text":"<pre><code>instruction = instruction\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirement.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url = url\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirement.doc","title":"doc  <code>instance-attribute</code>","text":"<pre><code>doc = doc\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirement.is_fulfilled","title":"is_fulfilled  <code>abstractmethod</code>","text":"<pre><code>is_fulfilled(**kwargs: Any) -&gt; bool\n</code></pre> <p>Check if the requirement is met.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirement.dependencies_fulfilled","title":"dependencies_fulfilled","text":"<pre><code>dependencies_fulfilled() -&gt; bool\n</code></pre> <p>Check if all dependencies for this requirement are fulfilled.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirement.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a developer-friendly string representation of the requirement.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.DownloadableRequirement","title":"DownloadableRequirement","text":"<pre><code>DownloadableRequirement(\n    name: str,\n    depends_on: list[SASTRequirement] | None = None,\n    instruction: str | None = None,\n    url: str | None = None,\n    doc: bool = False,\n)\n</code></pre> <p>               Bases: <code>SASTRequirement</code></p> <p>Represent a SAST requirement that can be downloaded automatically.</p> <p>Initialize a DownloadableRequirement instance.</p> <p>Sets a standard instruction message on how to download the requirement using the CLI.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the requirement.</p> required <code>list[SASTRequirement] | None</code> <p>A list of other requirements that must be fulfilled first.</p> <code>None</code> <code>str | None</code> <p>A short instruction on how to download the requirement.</p> <code>None</code> <code>str | None</code> <p>A URL for more detailed instructions.</p> <code>None</code> <code>bool</code> <p>A flag indicating if the instruction is available in the documentation.</p> <code>False</code> <p>Methods:</p> Name Description <code>download</code> <p>Download the requirement.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.DownloadableRequirement(name)","title":"<code>name</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.DownloadableRequirement(depends_on)","title":"<code>depends_on</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.DownloadableRequirement(instruction)","title":"<code>instruction</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.DownloadableRequirement(url)","title":"<code>url</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.DownloadableRequirement(doc)","title":"<code>doc</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.DownloadableRequirement.download","title":"download  <code>abstractmethod</code>","text":"<pre><code>download(**kwargs: Any) -&gt; None\n</code></pre> <p>Download the requirement.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.Config","title":"Config","text":"<pre><code>Config(\n    name: str,\n    depends_on: list[SASTRequirement] | None = None,\n    instruction: str | None = None,\n    url: str | None = None,\n    doc: bool = False,\n)\n</code></pre> <p>               Bases: <code>SASTRequirement</code></p> <p>Represent a configuration file requirement for a SAST tool.</p> <p>Initialize a Config instance.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the requirement.</p> required <code>list[SASTRequirement] | None</code> <p>A list of other requirements that must be fulfilled first.</p> <code>None</code> <code>str | None</code> <p>A short instruction on how to download the requirement.</p> <code>None</code> <code>str | None</code> <p>A URL for more detailed instructions.</p> <code>None</code> <code>bool</code> <p>A flag indicating if the instruction is available in the documentation.</p> <code>False</code> <p>Methods:</p> Name Description <code>is_fulfilled</code> <p>Check if the configuration file exists for the given SAST tool.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.Config(name)","title":"<code>name</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.Config(depends_on)","title":"<code>depends_on</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.Config(instruction)","title":"<code>instruction</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.Config(url)","title":"<code>url</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.Config(doc)","title":"<code>doc</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.Config.is_fulfilled","title":"is_fulfilled","text":"<pre><code>is_fulfilled(sast_name: str, **kwargs: Any) -&gt; bool\n</code></pre> <p>Check if the configuration file exists for the given SAST tool.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.Binary","title":"Binary","text":"<pre><code>Binary(\n    name: str,\n    depends_on: list[SASTRequirement] | None = None,\n    instruction: str | None = None,\n    url: str | None = None,\n    doc: bool = False,\n)\n</code></pre> <p>               Bases: <code>SASTRequirement</code></p> <p>Represent a binary executable requirement for a SAST tool.</p> <p>Initialize a Binary instance.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the requirement.</p> required <code>list[SASTRequirement] | None</code> <p>A list of other requirements that must be fulfilled first.</p> <code>None</code> <code>str | None</code> <p>A short instruction on how to download the requirement.</p> <code>None</code> <code>str | None</code> <p>A URL for more detailed instructions.</p> <code>None</code> <code>bool</code> <p>A flag indicating if the instruction is available in the documentation.</p> <code>False</code> <p>Methods:</p> Name Description <code>is_fulfilled</code> <p>Check if the binary is available in the system's PATH.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.Binary(name)","title":"<code>name</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.Binary(depends_on)","title":"<code>depends_on</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.Binary(instruction)","title":"<code>instruction</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.Binary(url)","title":"<code>url</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.Binary(doc)","title":"<code>doc</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.Binary.is_fulfilled","title":"is_fulfilled","text":"<pre><code>is_fulfilled(**kwargs: Any) -&gt; bool\n</code></pre> <p>Check if the binary is available in the system's PATH.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.GitRepo","title":"GitRepo","text":"<pre><code>GitRepo(\n    name: str,\n    repo_url: str,\n    license: str,\n    license_url: str,\n    depends_on: list[SASTRequirement] | None = None,\n    instruction: str | None = None,\n    url: str | None = None,\n    doc: bool = False,\n)\n</code></pre> <p>               Bases: <code>DownloadableRequirement</code></p> <p>Represent a Git repository requirement that can be downloaded.</p> <p>Initialize a GitRepo requirement instance.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the requirement.</p> required <code>str</code> <p>The URL of the Git repository to clone.</p> required <code>str</code> <p>The license of the repository.</p> required <code>str</code> <p>A URL for the repository's license.</p> required <code>list[SASTRequirement] | None</code> <p>A list of other requirements that must be fulfilled first.</p> <code>None</code> <code>str | None</code> <p>A short instruction on how to download the requirement.</p> <code>None</code> <code>str | None</code> <p>A URL for more detailed instructions.</p> <code>None</code> <code>bool</code> <p>A flag indicating if the instruction is available in the documentation.</p> <code>False</code> <p>Methods:</p> Name Description <code>is_fulfilled</code> <p>Check if the Git repository has been cloned.</p> <code>download</code> <p>Prompt for license agreement and clone the Git repository.</p> <p>Attributes:</p> Name Type Description <code>repo_url</code> <code>license</code> <code>license_url</code> <code>directory</code>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.GitRepo(name)","title":"<code>name</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.GitRepo(repo_url)","title":"<code>repo_url</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.GitRepo(license)","title":"<code>license</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.GitRepo(license_url)","title":"<code>license_url</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.GitRepo(depends_on)","title":"<code>depends_on</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.GitRepo(instruction)","title":"<code>instruction</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.GitRepo(url)","title":"<code>url</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.GitRepo(doc)","title":"<code>doc</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.GitRepo.repo_url","title":"repo_url  <code>instance-attribute</code>","text":"<pre><code>repo_url = repo_url\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.GitRepo.license","title":"license  <code>instance-attribute</code>","text":"<pre><code>license = license\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.GitRepo.license_url","title":"license_url  <code>instance-attribute</code>","text":"<pre><code>license_url = license_url\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.GitRepo.directory","title":"directory  <code>instance-attribute</code>","text":"<pre><code>directory = USER_CACHE_DIR / self.name\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.GitRepo.is_fulfilled","title":"is_fulfilled","text":"<pre><code>is_fulfilled(**kwargs: Any) -&gt; bool\n</code></pre> <p>Check if the Git repository has been cloned.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.GitRepo.download","title":"download","text":"<pre><code>download(**kwargs: Any) -&gt; None\n</code></pre> <p>Prompt for license agreement and clone the Git repository.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.File","title":"File","text":"<pre><code>File(\n    name: str,\n    parent_dir: Path,\n    file_url: str,\n    license: str,\n    license_url: str,\n    depends_on: list[SASTRequirement] | None = None,\n    instruction: str | None = None,\n    url: str | None = None,\n    doc: bool = False,\n)\n</code></pre> <p>               Bases: <code>DownloadableRequirement</code></p> <p>Represent a file requirement that can be downloaded.</p> <p>Initialize a File requirement instance.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The name of the requirement.</p> required <code>Path</code> <p>The directory where the file should be saved.</p> required <code>str</code> <p>The URL to download the file from.</p> required <code>str</code> <p>The license of the file.</p> required <code>str</code> <p>A URL for the file's license.</p> required <code>list[SASTRequirement] | None</code> <p>A list of other requirements that must be fulfilled first.</p> <code>None</code> <code>str | None</code> <p>A short instruction on how to download the requirement.</p> <code>None</code> <code>str | None</code> <p>A URL for more detailed instructions.</p> <code>None</code> <code>bool</code> <p>A flag indicating if the instruction is available in the documentation.</p> <code>False</code> <p>Methods:</p> Name Description <code>is_fulfilled</code> <p>Check if the file has been downloaded.</p> <code>download</code> <p>Prompt for license agreement and download the file.</p> <p>Attributes:</p> Name Type Description <code>parent_dir</code> <code>file_url</code> <code>license</code> <code>license_url</code>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.File(name)","title":"<code>name</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.File(parent_dir)","title":"<code>parent_dir</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.File(file_url)","title":"<code>file_url</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.File(license)","title":"<code>license</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.File(license_url)","title":"<code>license_url</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.File(depends_on)","title":"<code>depends_on</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.File(instruction)","title":"<code>instruction</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.File(url)","title":"<code>url</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.File(doc)","title":"<code>doc</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.File.parent_dir","title":"parent_dir  <code>instance-attribute</code>","text":"<pre><code>parent_dir = parent_dir\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.File.file_url","title":"file_url  <code>instance-attribute</code>","text":"<pre><code>file_url = file_url\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.File.license","title":"license  <code>instance-attribute</code>","text":"<pre><code>license = license\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.File.license_url","title":"license_url  <code>instance-attribute</code>","text":"<pre><code>license_url = license_url\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.File.is_fulfilled","title":"is_fulfilled","text":"<pre><code>is_fulfilled(**kwargs: Any) -&gt; bool\n</code></pre> <p>Check if the file has been downloaded.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.File.download","title":"download","text":"<pre><code>download(**kwargs: Any) -&gt; None\n</code></pre> <p>Prompt for license agreement and download the file.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirements","title":"SASTRequirements","text":"<pre><code>SASTRequirements(\n    full_reqs: list[SASTRequirement],\n    partial_reqs: list[SASTRequirement],\n)\n</code></pre> <p>Manage the requirements for a SAST tool and determine its operational status.</p> <p>Initialize a SASTRequirements instance.</p> <p>Parameters:</p> Name Type Description Default <code>list[SASTRequirement]</code> <p>A list of requirements for full functionality.</p> required <code>list[SASTRequirement]</code> <p>A list of requirements for partial functionality.</p> required <p>Methods:</p> Name Description <code>get_status</code> <p>Determine the operational status (full, partial, none) based on fulfilled requirements.</p> <code>get_missing</code> <p>Get a list of all unfulfilled requirements.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>full</code> <code>partial</code> <code>all</code>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirements(full_reqs)","title":"<code>full_reqs</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirements(partial_reqs)","title":"<code>partial_reqs</code>","text":""},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirements.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = None\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirements.full","title":"full  <code>instance-attribute</code>","text":"<pre><code>full = full_reqs\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirements.partial","title":"partial  <code>instance-attribute</code>","text":"<pre><code>partial = partial_reqs\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirements.all","title":"all  <code>instance-attribute</code>","text":"<pre><code>all = full_reqs + partial_reqs\n</code></pre>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirements.get_status","title":"get_status","text":"<pre><code>get_status() -&gt; (\n    Literal[\"full\"] | Literal[\"partial\"] | Literal[\"none\"]\n)\n</code></pre> <p>Determine the operational status (full, partial, none) based on fulfilled requirements.</p>"},{"location":"api/sast.html#codesectools.sasts.core.sast.requirements.SASTRequirements.get_missing","title":"get_missing","text":"<pre><code>get_missing() -&gt; list[SASTRequirement]\n</code></pre> <p>Get a list of all unfulfilled requirements.</p>"},{"location":"api/shared.html","title":"Shared","text":""},{"location":"api/shared.html#codesectools.shared","title":"codesectools.shared","text":"<p>Modules:</p> Name Description <code>cloc</code> <p>Provide a wrapper for counting lines of code using the cloc tool.</p> <code>cwe</code> <p>Handle Common Weakness Enumeration (CWE) data.</p>"},{"location":"api/shared.html#codesectools.shared.cloc","title":"cloc","text":"<p>Provide a wrapper for counting lines of code using the cloc tool.</p> <p>This module contains the <code>Cloc</code> class, a wrapper around the <code>cloc</code> tool, to calculate the number of physical lines of source code for a specific language within a directory.</p>"},{"location":"api/shared.html#codesectools.shared.cloc.Cloc","title":"Cloc","text":"<pre><code>Cloc(dir: Path, lang: str)\n</code></pre> <p>A wrapper for the 'cloc' (Count Lines of Code) tool.</p> <p>Find the 'cloc' executable or download and use the Perl script if the executable is not available but Perl is. Provide a method to count lines of code for a specific language.</p> <p>Attributes:</p> Name Type Description <code>version</code> <code>str</code> <p>The version of the cloc Perl script to download.</p> <code>cloc_names</code> <code>dict</code> <p>A mapping from internal language names to the names used by cloc.</p> <code>dir</code> <code>Path</code> <p>The directory to run cloc in.</p> <code>lang</code> <code>str</code> <p>The programming language to count, mapped to the cloc name.</p> <code>base_command</code> <code>list[str]</code> <p>The command list to execute cloc.</p> <p>Initialize the Cloc wrapper.</p> <p>Check for the 'cloc' binary. If not found, check for 'perl' and download the 'cloc.pl' script if it doesn't exist locally.</p> <p>Parameters:</p> Name Type Description Default <code>Path</code> <p>The directory to run cloc in.</p> required <code>str</code> <p>The programming language to count.</p> required <p>Methods:</p> Name Description <code>get_loc</code> <p>Get the lines of code for the specified language.</p>"},{"location":"api/shared.html#codesectools.shared.cloc.Cloc(dir)","title":"<code>dir</code>","text":""},{"location":"api/shared.html#codesectools.shared.cloc.Cloc(lang)","title":"<code>lang</code>","text":""},{"location":"api/shared.html#codesectools.shared.cloc.Cloc.version","title":"version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>version = '2.06'\n</code></pre>"},{"location":"api/shared.html#codesectools.shared.cloc.Cloc.cloc_names","title":"cloc_names  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cloc_names = {'java': 'Java', 'c': 'C'}\n</code></pre>"},{"location":"api/shared.html#codesectools.shared.cloc.Cloc.dir","title":"dir  <code>instance-attribute</code>","text":"<pre><code>dir = dir\n</code></pre>"},{"location":"api/shared.html#codesectools.shared.cloc.Cloc.lang","title":"lang  <code>instance-attribute</code>","text":"<pre><code>lang = self.cloc_names[lang]\n</code></pre>"},{"location":"api/shared.html#codesectools.shared.cloc.Cloc.base_command","title":"base_command  <code>instance-attribute</code>","text":"<pre><code>base_command = ['cloc', '.', '--json']\n</code></pre>"},{"location":"api/shared.html#codesectools.shared.cloc.Cloc.get_loc","title":"get_loc","text":"<pre><code>get_loc() -&gt; int\n</code></pre> <p>Get the lines of code for the specified language.</p> <p>Execute the cloc command, parse the JSON output, and return the number of source code lines.</p> <p>Returns:</p> Type Description <code>int</code> <p>The number of lines of code, or 0 if the language is not found</p> <code>int</code> <p>in the output.</p> <p>Raises:</p> Type Description <code>NonZeroExit</code> <p>If the cloc command fails.</p>"},{"location":"api/shared.html#codesectools.shared.cwe","title":"cwe","text":"<p>Handle Common Weakness Enumeration (CWE) data.</p> <p>This module downloads the CWE list from cwe.mitre.org if not already cached, and provides classes to access and manage CWE data.</p> <p>Attributes:</p> Name Type Description <code>CWEs</code>"},{"location":"api/shared.html#codesectools.shared.cwe.CWEs","title":"CWEs  <code>module-attribute</code>","text":"<pre><code>CWEs = CWEsCollection()\n</code></pre>"},{"location":"api/shared.html#codesectools.shared.cwe.CWE","title":"CWE","text":"<pre><code>CWE(id: int, name: str, description: str)\n</code></pre> <p>Represent a single Common Weakness Enumeration.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The CWE identifier.</p> <code>name</code> <code>str</code> <p>The name of the weakness.</p> <code>description</code> <code>str</code> <p>A description of the weakness.</p> <p>Initialize a CWE instance.</p> <p>Parameters:</p> Name Type Description Default <code>int</code> <p>The CWE identifier.</p> required <code>str</code> <p>The name of the weakness.</p> required <code>str</code> <p>A description of the weakness.</p> required <p>Methods:</p> Name Description <code>__eq__</code> <p>Compare this CWE with another object for equality.</p> <code>__hash__</code> <p>Return the hash of the CWE instance, based on its ID.</p> <code>__repr__</code> <p>Return a developer-friendly string representation of the CWE.</p>"},{"location":"api/shared.html#codesectools.shared.cwe.CWE(id)","title":"<code>id</code>","text":""},{"location":"api/shared.html#codesectools.shared.cwe.CWE(name)","title":"<code>name</code>","text":""},{"location":"api/shared.html#codesectools.shared.cwe.CWE(description)","title":"<code>description</code>","text":""},{"location":"api/shared.html#codesectools.shared.cwe.CWE.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id = id\n</code></pre>"},{"location":"api/shared.html#codesectools.shared.cwe.CWE.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = r.group(1)\n</code></pre>"},{"location":"api/shared.html#codesectools.shared.cwe.CWE.full_name","title":"full_name  <code>instance-attribute</code>","text":"<pre><code>full_name = name\n</code></pre>"},{"location":"api/shared.html#codesectools.shared.cwe.CWE.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description = description\n</code></pre>"},{"location":"api/shared.html#codesectools.shared.cwe.CWE.__eq__","title":"__eq__","text":"<pre><code>__eq__(other: Self | int) -&gt; bool\n</code></pre> <p>Compare this CWE with another object for equality.</p> <p>Parameters:</p> Name Type Description Default <code>Self | int</code> <p>The object to compare with. Can be another CWE instance    or an integer representing the CWE ID.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the IDs are equal, False otherwise.</p>"},{"location":"api/shared.html#codesectools.shared.cwe.CWE.__eq__(other)","title":"<code>other</code>","text":""},{"location":"api/shared.html#codesectools.shared.cwe.CWE.__hash__","title":"__hash__","text":"<pre><code>__hash__() -&gt; int\n</code></pre> <p>Return the hash of the CWE instance, based on its ID.</p>"},{"location":"api/shared.html#codesectools.shared.cwe.CWE.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a developer-friendly string representation of the CWE.</p> <p>Returns:</p> Type Description <code>str</code> <p>A string showing the class name and CWE ID.</p>"},{"location":"api/shared.html#codesectools.shared.cwe.CWEsCollection","title":"CWEsCollection","text":"<pre><code>CWEsCollection()\n</code></pre> <p>Manage the collection of all CWEs.</p> <p>Downloads and loads the official CWE list from a CSV file.</p> <p>Attributes:</p> Name Type Description <code>cwes_data</code> <code>dict</code> <p>A mapping of CWE categories to their CSV filenames.</p> <code>directory</code> <code>Path</code> <p>The path to the cached CWE data directory.</p> <code>cwes</code> <code>list[CWE]</code> <p>A list of all loaded CWE objects.</p> <p>Initialize the CWEs collection.</p> <p>Download the CWE data from cwe.mitre.org if it's not present in the user cache.</p> <p>Methods:</p> Name Description <code>download</code> <p>Download CWE data from the official MITRE website.</p> <code>load</code> <p>Load CWE data from the CSV file.</p> <code>from_string</code> <p>Get a CWE from a string like 'CWE-79'.</p> <code>from_id</code> <p>Get a CWE by its identifier.</p>"},{"location":"api/shared.html#codesectools.shared.cwe.CWEsCollection.cwes_data","title":"cwes_data  <code>instance-attribute</code>","text":"<pre><code>cwes_data = {\n    \"Software Development\": \"699.csv\",\n    \"Hardware Design\": \"1194.csv\",\n    \"Research Concepts\": \"1000.csv\",\n}\n</code></pre>"},{"location":"api/shared.html#codesectools.shared.cwe.CWEsCollection.directory","title":"directory  <code>instance-attribute</code>","text":"<pre><code>directory = USER_CACHE_DIR / 'cwe'\n</code></pre>"},{"location":"api/shared.html#codesectools.shared.cwe.CWEsCollection.cwes","title":"cwes  <code>instance-attribute</code>","text":"<pre><code>cwes = self.load()\n</code></pre>"},{"location":"api/shared.html#codesectools.shared.cwe.CWEsCollection.download","title":"download","text":"<pre><code>download() -&gt; None\n</code></pre> <p>Download CWE data from the official MITRE website.</p>"},{"location":"api/shared.html#codesectools.shared.cwe.CWEsCollection.load","title":"load","text":"<pre><code>load() -&gt; list[CWE]\n</code></pre> <p>Load CWE data from the CSV file.</p> <p>Returns:</p> Type Description <code>list[CWE]</code> <p>A list of CWE objects.</p>"},{"location":"api/shared.html#codesectools.shared.cwe.CWEsCollection.from_string","title":"from_string","text":"<pre><code>from_string(cwe_string: str) -&gt; CWE\n</code></pre> <p>Get a CWE from a string like 'CWE-79'.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The string representation of the CWE ID.</p> required <p>Returns:</p> Type Description <code>CWE</code> <p>The corresponding CWE object, or a default 'Invalid CWE' object if the string is malformed.</p>"},{"location":"api/shared.html#codesectools.shared.cwe.CWEsCollection.from_string(cwe_string)","title":"<code>cwe_string</code>","text":""},{"location":"api/shared.html#codesectools.shared.cwe.CWEsCollection.from_id","title":"from_id","text":"<pre><code>from_id(cwe_id: int) -&gt; CWE\n</code></pre> <p>Get a CWE by its identifier.</p> <p>Parameters:</p> Name Type Description Default <code>int</code> <p>The integer ID of the CWE to find.</p> required <p>Returns:</p> Type Description <code>CWE</code> <p>The CWE object if found, otherwise a default CWE object with ID -1.</p>"},{"location":"api/shared.html#codesectools.shared.cwe.CWEsCollection.from_id(cwe_id)","title":"<code>cwe_id</code>","text":""},{"location":"dataset/index.html","title":"Dataset","text":"<p>A dataset in CodeSecTools is a collection of code samples used to benchmark and evaluate the performance of SAST tools. Each dataset contains a \"ground truth,\" which specifies which code samples contain vulnerabilities and which do not, along with the corresponding Common Weakness Enumeration (CWE) IDs.</p>"},{"location":"dataset/index.html#types","title":"Types","text":"<p>CodeSecTools supports two main types of datasets:</p> <ul> <li><code>FileDataset</code>: A collection of individual source code files. Each file is a self-contained test case, which is useful for testing specific, isolated code patterns.</li> <li><code>GitRepoDataset</code>: A collection of Git repositories, each checked out to a specific commit. This type is ideal for representing real-world vulnerabilities in the context of a larger project.</li> </ul>"},{"location":"dataset/index.html#core-components","title":"Core Components","text":"<p>The framework provides a set of core abstract classes to standardize dataset integrations. The main components are <code>Dataset</code>, <code>FileDataset</code>, <code>GitRepoDataset</code>, <code>File</code>, and <code>GitRepo</code>.</p> <pre><code>classDiagram\n    class Dataset {\n        +name: str\n        +supported_languages: list~str~\n        +license: str\n        +license_url: str\n        +directory: Path\n        +files: list~DatasetUnit~\n        +is_cached() bool\n        +download_files()* void\n        +download_dataset() void\n        +load_dataset()* list~DatasetUnit~\n    }\n    class FileDataset {\n        +files: list~File~\n        +validate(analysis_result) FileDatasetData\n    }\n    class GitRepoDataset {\n        +repos: list~GitRepo~\n        +validate(analysis_results) GitRepoDatasetData\n    }\n    class File {\n        +filename: str\n        +content: bytes\n        +cwes: list~CWE~\n        +has_vuln: bool\n    }\n    class GitRepo {\n        +name: str\n        +url: str\n        +commit: str\n        +size: int\n        +cwes: list~CWE~\n        +files: list~str~\n        +has_vuln: bool\n    }\n    Dataset &lt;-- FileDataset : extends\n    Dataset &lt;-- GitRepoDataset : extends\n    FileDataset --&gt; File : contains\n    GitRepoDataset --&gt; GitRepo : contains</code></pre>"},{"location":"dataset/index.html#integration","title":"Integration","text":"<p>To integrate a new dataset into CodeSecTools, you need to create one main script:</p> <ul> <li><code>dataset.py</code>: Defines the dataset's metadata (name, supported languages, license), provides the logic for downloading the dataset files, and implements the logic to load the code samples and their ground truth.</li> </ul> <p>Once this script is added to a new subdirectory within <code>codesectools/datasets/</code>, the dataset is automatically discovered and integrated into the framework.</p>"},{"location":"dataset/index.html#requirements","title":"Requirements","text":"<p>A dataset must meet the following requirements to be integrated:</p> <ul> <li>It must have a clearly defined ground truth, specifying which code units (files or repository commits) are vulnerable and which are not.</li> <li>For vulnerable units, the associated CWE(s) must be provided.</li> <li>The dataset must have a license, and the license information (name and URL) must be provided.</li> </ul>"},{"location":"dataset/index.html#example","title":"Example","text":"<p>Please refer to existing dataset implementations for an example.</p>"},{"location":"dataset/supported/index.html","title":"List of supported datasets","text":"Name Type Supported version Supported languages Legal BenchmarkJava <code>File</code> <code>Latest</code> <code>Java</code> <code>GPL-2.0 (Copyleft)</code> CVEfixes <code>GitRepo</code> <code>v1.0.8</code> <code>Java</code> <code>CC BY 4.0 (Permissive)</code>"},{"location":"dataset/supported/benchmarkjava.j2.html","title":"BenchmarkJava","text":"<p>The OWASP Benchmark Project is a Java test suite designed to verify the speed and accuracy of vulnerability detection tools. It is a fully runnable open source web application that can be analyzed by any type of Application Security Testing (AST) tool, including SAST, DAST (like ZAP), and IAST tools. The intent is that all the vulnerabilities deliberately included in and scored by the Benchmark are actually exploitable so its a fair test for any kind of application vulnerability detection tool. The Benchmark also includes scorecard generators for numerous open source and commercial AST tools, and the set of supported tools is growing all the time.</p> <p>Type: <code>File</code></p> <p>Supported version: <code>Latest</code></p> <p>Supported languages: <code>Java</code></p> <p>Legal Notice</p> <ul> <li>License: <code>GPL-2.0</code> (<code>Copyleft</code>) </li> </ul> <p>Disclaimer</p> <p>This project provides wrappers and scripts to integrate with <code>BenchmarkJava</code>, but does not include the tool itself. Therefore, you are responsible for reviewing and complying with the product's license and terms of use.</p> <p>Requirements</p> <ul> <li>An internet connection is required only to download the dataset.</li> </ul> <p>Dataset content</p> <ul> <li><code>src/main/java/org/owasp/benchmark/testcode/*</code></li> <li><code>expectedresults-1.2.csv</code></li> </ul> <p>Downloaded from OWASP-Benchmark/BenchmarkJava.</p>"},{"location":"dataset/supported/cvefixes.j2.html","title":"CVEfixes","text":"<p>CVEfixes is a comprehensive vulnerability dataset that is automatically collected and curated from Common Vulnerabilities and Exposures (CVE) records in the public U.S. National Vulnerability Database (NVD). The goal is to support data-driven security research based on source code and source code metrics related to fixes for CVEs in the NVD by providing detailed information at different interlinked levels of abstraction, such as the commit-, file-, and method level, as well as the repository- and CVE level.</p> <p>Type: <code>GitRepo</code></p> <p>Supported version: <code>v1.0.8</code></p> <p>Supported languages: <code>Java</code></p> <p>Legal Notice</p> <ul> <li>License: <code>CC BY 4.0</code> (<code>Permissive</code>) </li> </ul> <p>Disclaimer</p> <p>This project provides wrappers and scripts to integrate with <code>CVEfixes</code>, but does not include the tool itself. Therefore, you are responsible for reviewing and complying with the product's license and terms of use.</p> <p>Requirements</p> <ul> <li>None</li> </ul> <p>Dataset content</p> <ul> <li><code>CVEfixes_java.csv</code></li> </ul> <p>Included and pre-extracted from the original dataset available at Zenodo.</p> <p>Large Original Dataset</p> <p>The full CVEfixes dataset is a SQLite database of approximately 50GB. To keep it manageable for SAST tools, we provide a pre-processed version with minimal data for specific languages.</p> <p>We extracted the following columns to create language-specific CSV files (e.g., <code>CVEfixes_java.csv</code>):</p> <ul> <li><code>cve_id</code></li> <li><code>cwe_ids</code></li> <li><code>repo_url</code></li> <li><code>parents</code> (vulnerable commit)</li> <li><code>filenames</code></li> </ul> <p>We also added <code>repo_size</code> for each repository, fetched using the GitHub API.</p> Extract a minimal version for a specific programming language <p>Requirements:</p> <ol> <li>Download <code>CVEfixes.db</code> from Zenodo.</li> <li>Modify the script variables <code>LANG</code>, <code>LANG_EXT</code>, and <code>TOKEN</code> to match your needs.</li> </ol> <p>GitHub API Token:</p> <p>A GitHub Personal Access Token (PAT) is required to query repository sizes due to API rate limits.</p> <ol> <li>Generate a new token at github.com/settings/tokens/new with the <code>public_repo</code> scope.</li> <li>Paste the token into the <code>TOKEN</code> variable in the script.</li> <li>Remember to delete the token after use.</li> </ol> <p>```python   import csv   import sqlite3   import sys</p> <p>import requests</p> <p>LANG = \"\"   LANG_EXT = []   TOKEN = \"YOUR_GITHUB_TOKEN\" <p>def get_size(repo_url: str) -&gt; int | None:       \"\"\"Get the size of a GitHub repository.\"\"\"       headers = {\"Authorization\": f\"Bearer {TOKEN}\"}       r = requests.get(           repo_url.replace(\"github.com\", \"api.github.com/repos\"), headers=headers       )       size_kb = r.json().get(\"size\", None)       if size_kb:           return size_kb * 1000</p> <p>headers = {\"Authorization\": f\"Bearer {TOKEN}\"}   r = requests.get(\"https://api.github.com\", headers=headers)   if r.status_code == 401:       print(r.json())       sys.exit(1)</p> <p>conn = sqlite3.connect(\"CVEfixes.db\")   cursor = conn.cursor()   query = f\"\"\"   SELECT       cve.cve_id,       REPLACE(GROUP_CONCAT(DISTINCT cwe.cwe_id), ',', ';') AS cwe_ids,       REPLACE(GROUP_CONCAT(DISTINCT cwe.description), ',', ';') AS cwe_descriptions,       repository.repo_url,       commits.parents,       REPLACE(GROUP_CONCAT(DISTINCT file_change.filename), ',', ';') AS filenames   FROM cve   JOIN fixes ON fixes.cve_id = cve.cve_id   JOIN commits ON commits.hash = fixes.hash AND commits.repo_url = fixes.repo_url   JOIN file_change ON file_change.hash = commits.hash   JOIN repository ON repository.repo_url = commits.repo_url   JOIN cwe_classification ON cwe_classification.cve_id = cve.cve_id   JOIN cwe ON cwe.cwe_id = cwe_classification.cwe_id   WHERE LOWER(repository.repo_language) = '{LANG}'       AND cwe.cwe_id GLOB 'CWE-[0-9]*'\"\"\"</p> <p>for ext in LANG_EXT:       query += f\"\"\"   AND file_change.filename GLOB '*.{ext}'\"\"\"</p> <p>query += \"\"\"   AND file_change.filename NOT GLOB '[Tt]est'   GROUP BY cve.cve_id;\"\"\"   cursor.execute(query)   rows = cursor.fetchall()</p> <p>with open(f\"CVEfixes_{LANG}.csv\", \"w\", newline=\"\", encoding=\"utf-8\") as csvfile:       writer = csv.writer(csvfile)       headers = [desc[0] for desc in cursor.description] + [\"repo_size\"]       writer.writerow(headers)</p> <pre><code>  for row in rows:\n      repo_url = row[3]\n      size = get_size(repo_url)\n      writer.writerow(list(row) + [size])\n</code></pre> <p>conn.close()</p>"},{"location":"sast/index.html","title":"SAST","text":"<p>SAST (Static Application Security Testing) is a methodology that involves using automated tools to find security vulnerabilities in software by analyzing its source code without executing it.</p>"},{"location":"sast/index.html#techniques","title":"Techniques","text":"<p>SAST tools use various techniques, including:</p> <ul> <li><code>Pattern Matching</code>: Finds known-vulnerable code patterns. This technique does not require compilation.</li> <li><code>Data Flow Analysis</code>:: Tracks data from sources to sinks to find security flaws. It is more accurate on compiled code but also works on source code.</li> </ul> <p>The analysis process also depends on the programming language:</p> <ul> <li><code>Interpreted languages</code>: SAST tools can often analyze the source code directly without a compilation step.</li> <li><code>Compiled languages</code>: SAST tools often require the code to be compiled first. This allows the tool to resolve dependencies, understand classpaths, and build a more accurate model of the application for deeper analysis.</li> </ul>"},{"location":"sast/index.html#core-components","title":"Core Components","text":"<p>The framework provides a set of core abstract classes to standardize SAST integrations. The main components are <code>SAST</code>, <code>AnalysisResult</code>, and <code>Defect</code>.</p> <pre><code>classDiagram\n    class SAST {\n        +name: str\n        +supported_languages: list~str~\n        +supported_dataset_names: list~str~\n        +supported_datasets: list~Dataset~\n        +properties: SASTProperties\n        +requirements: SASTRequirements\n        +commands: list~list~str~~\n        +environ: dict~str, str~\n        +output_files: list~tuple~Path, bool~~\n        +parser: type~AnalysisResult~\n        +run_analysis(lang, project_dir, output_dir) void\n        +save_results(project_dir, output_dir, extra) void\n        +analyze_files(dataset, overwrite, testing) void\n        +analyze_repos(dataset, overwrite, testing) void\n        +list_results(project, dataset, limit) list~str~\n    }\n\n    class BuildlessSAST {\n    }\n\n    class PrebuiltSAST {\n    }\n\n    SAST &lt;|-- BuildlessSAST\n    SAST &lt;|-- PrebuiltSAST\n\n    class AnalysisResult {\n        +name: str\n        +source_path: Path\n        +lang: str\n        +files: list~str~\n        +defects: list~Defect~\n        +time: float\n        +loc: int\n        +load_from_output_dir(output_dir)* Self\n        +load_from_output_dirs(output_dirs) list~Self~\n        +stats_by_checkers() dict\n        +stats_by_categories() dict\n        +stats_by_files() dict\n        +stats_by_cwes() dict\n    }\n\n    class Defect {\n        +sast: str\n        +filepath: Path\n        +filename: str\n        +checker: str\n        +category: str\n        +cwe: CWE\n        +message: str\n        +location: tuple~int, int~\n    }\n\n    AnalysisResult --&gt; Defect : contains</code></pre>"},{"location":"sast/index.html#integration","title":"Integration","text":"<p>To integrate a new SAST into CodeSecTools, you need to create three main scripts:</p> <ul> <li><code>sast.py</code>: Defines the SAST's metadata, such as its name, supported languages, properties, and requirements.</li> <li><code>parser.py</code>: Contains the logic to parse the output files generated by the SAST tool and structure the findings.</li> <li><code>cli.py</code>: Sets up the command-line interface for interacting with the SAST integration.</li> </ul> <p>Once these scripts are added, the SAST is automatically integrated into the framework.</p>"},{"location":"sast/index.html#requirements","title":"Requirements","text":"<p>A SAST tool must meet the following requirements to be integrated:</p> <ul> <li>It must offer a command-line interface (CLI) or an API to trigger an analysis.</li> <li>The analysis results must include a Common Weakness Enumeration (CWE) ID for each identified vulnerability.</li> </ul> <p>It is important to note that CodeSecTools provides only the integration scripts, not the SAST tools themselves.</p> <p>Proprietary and private SAST tools can also be integrated. However, you must ensure that you provide all required licensing information.</p> <p>When integrating a proprietary tool, DO NOT commit any proprietary or private data (such as license keys, binaries, or confidential source code) to the CodeSecTools repository, as this could violate licensing agreements.</p> <p>Instead, store this data locally in <code>~/.codesectools/config/my_sast</code> and access it from your integration code using the following utility: <pre><code>from codesectools.utils import USER_CONFIG_DIR\nmy_private_file = USER_CONFIG_DIR / \"my_sast\" / \"secrets.txt\"\n</code></pre></p>"},{"location":"sast/index.html#example","title":"Example","text":"<p>Please refer to existing SAST implementations for an example.</p>"},{"location":"sast/supported/index.html","title":"List of supported SAST tools","text":"Name Type Supported version Supported languages Legal Bearer <code>Data Flow Analysis (Source code)</code> <code>1.151.0</code> <code>Java</code> <code>Elastic License 2.0 (Source Available)</code> Coverity Static Analysis <code>Data Flow Analysis (Source code and compiled code)</code> <code>2024.12.1</code> <code>Java</code> <code>Black Duck Terms of Service v2024.2</code> Semgrep Community Edition <code>Pattern matching</code> <code>1.128.1</code> <code>C, Java</code> <code>LGPL-2.1 (Copyleft)</code> Snyk Code <code>Data Flow Analysis (Source code)</code> <code>1.1298.3</code> <code>C, Java</code> <code>SNYK TERMS OF SERVICE</code> SpotBugs <code>Data Flow Analysis (Compiled code)</code> <code>4.9.7</code> <code>Java</code> <code>LGPL-2.1 (Copyleft)</code>"},{"location":"sast/supported/bearer.j2.html","title":"Bearer","text":"<p>Bearer is a static application security testing (SAST) tool designed to scan your source code and analyze data flows to identify, filter, and prioritize security and privacy risks.</p> <p>Type: <code>Data Flow Analysis (Source code)</code></p> <p>Supported version: <code>1.151.0</code></p> <p>Supported languages: <code>Java</code></p> <p>Legal Notice</p> <ul> <li>License: <code>Elastic License 2.0</code> (<code>Source Available</code>) </li> </ul> <p>Disclaimer</p> <p>This project provides wrappers and scripts to integrate with <code>Bearer</code>, but does not include the tool itself. Therefore, you are responsible for reviewing and complying with the product's license and terms of use.</p> <p>Requirements</p> <ul> <li> <p>An existing installation of Bearer.</p> </li> <li> <p>An internet connection is required only to download bearer-rules.</p> </li> </ul> <p>Key Considerations</p> <p>The analysis tool is using Bearer Rules which is also license under Elastic License 2.0.</p>"},{"location":"sast/supported/coverity.j2.html","title":"Coverity Static Analysis","text":"<p>Coverity\u00ae Static Analysis provides comprehensive code scanning that empowers developers and security teams to deliver high-quality software that complies with security, functional safety, and industry standards.</p> <p>Type: <code>Data Flow Analysis (Source code and compiled code)</code></p> <p>Supported version: <code>2024.12.1</code></p> <p>Supported languages: <code>Java</code></p> <p>Legal Notice</p> <ul> <li>Terms: <code>Black Duck Terms of Service v2024.2</code> </li> </ul> <p>Disclaimer</p> <p>This project provides wrappers and scripts to integrate with <code>Coverity Static Analysis</code>, but does not include the tool itself. Therefore, you are responsible for reviewing and complying with the product's license and terms of use.</p> <p>Requirements</p> <ul> <li> <p>An existing installation of Coverity and a commercial license.</p> </li> <li> <p>The <code>issueTypes.json</code> file (available in <code>idir/output</code>) to map checker types to CWE IDs.</p> </li> <li> <p>A <code>config.json</code> file for configuring supported languages and checker categories.</p> </li> </ul> User configuration (<code>config.json</code>) <p>Checker categories are used for statistical purposes only and do not change the analysis behavior.</p> <p>Example:       ```json {     \"color_mapping\": {         \"CRITICAL\": \"red\",         \"MODERATE\": \"orange\",         \"SIGMA\": \"gray\",         \"SPOTBUGS\": \"silver\"     },     \"languages\": {         \"c-family\":             \"checker_sets\": {                 \"CRITICAL\": [                     \"CHECKER_NAME\"                 ],                 \"MODERATE\": [                     \"CHECKER_NAME\"                 ]             },             \"exclude\": \"/test/\",             \"include\": \"\\.(c|cpp|h|hpp)$\"         },         \"java\": {             \"checker_sets\": {                 \"CRITICAL\": [                     \"CHECKER_NAME\",                 ],                 \"MODERATE\": [                     \"CHECKER_NAME\",                 ]             },             \"exclude\": \"/test/\",             \"include\": \"\\.java$\"         }     } }</p>"},{"location":"sast/supported/semgrepce.j2.html","title":"Semgrep Community Edition","text":"<p>Semgrep is a fast, open-source, static analysis tool that searches code, finds bugs, and enforces secure guardrails and coding standards. Semgrep supports 30+ languages and can run in an IDE, as a pre-commit check, and as part of CI/CD workflows.</p> <p>Type: <code>Pattern matching</code></p> <p>Supported version: <code>1.128.1</code></p> <p>Supported languages: <code>C, Java</code></p> <p>Legal Notice</p> <ul> <li> <p>License: <code>LGPL-2.1</code> (<code>Copyleft</code>) </p> </li> <li> <p>Terms: <code>Terms of Service</code> </p> </li> </ul> <p>Disclaimer</p> <p>This project provides wrappers and scripts to integrate with <code>Semgrep Community Edition</code>, but does not include the tool itself. Therefore, you are responsible for reviewing and complying with the product's license and terms of use.</p> <p>Requirements</p> <ul> <li> <p>An existing installation of Semgrep.</p> </li> <li> <p>An internet connection is required only to download semgrep-rules.</p> </li> </ul> <p>Key Considerations</p> <p>While the Semgrep Community Edition analysis tool (engine) is free, the rules it used may not be completely free.</p> <p>The analysis tool is using Semgrep Community Edition Rules which are licenced under Semgrep Rules License v. 1.0 which only allows for only for your own internal business purposes.</p>"},{"location":"sast/supported/snykcode.j2.html","title":"Snyk Code","text":"<p>Snyk Code is a developer-first static application security testing (SAST) solution. By scanning code in real-time and providing actionable insights directly in the developer workflow across IDEs, repositories, and CI/CD pipelines, you can identify and address vulnerabilities early on. The AI-based engine results in fewer false positives for your developers, improving code quality and security.</p> <p>Type: <code>Data Flow Analysis (Source code)</code></p> <p>Supported version: <code>1.1298.3</code></p> <p>Supported languages: <code>C, Java</code></p> <p>Legal Notice</p> <ul> <li>Terms: <code>SNYK TERMS OF SERVICE</code> </li> </ul> <p>Disclaimer</p> <p>This project provides wrappers and scripts to integrate with <code>Snyk Code</code>, but does not include the tool itself. Therefore, you are responsible for reviewing and complying with the product's license and terms of use.</p> <p>Requirements</p> <ul> <li> <p>A Snyk account (a free plan is sufficient).</p> </li> <li> <p>An existing Snyk CLI installation.</p> </li> <li> <p>An active internet connection.</p> </li> </ul> <p>Key Considerations</p> <ul> <li> <p>Data retention policy (Snyk documentation):</p> <ul> <li>Snyk stores project metadata and analysis results (e.g., filenames and vulnerability locations).</li> <li>Snyk does not store your source code.</li> </ul> </li> <li> <p>Limited usage:</p> <ul> <li>The free plan is limited to 100 Snyk Code tests per month.</li> </ul> </li> </ul> <p>Snyk Auth Token</p> <p>Authentication via <code>snyk auth</code> (OAuth) creates a temporary session that will expire, requiring periodic re-authentication. </p> <p>For persistent access, this integration requires a long-lived Auth Token:</p> <ul> <li> <p>Navigate to your Account settings &gt; General &gt; Auth Token to obtain your token.</p> </li> <li> <p>Store the token in the tool's configuration directory:</p> <pre><code>mkdir -p  ~/.codesectools/config/SnykCode\necho &lt;your-auth-token-here&gt; &gt; ~/.codesectools/config/SnykCode/auth_token.txt\n</code></pre> </li> </ul>"},{"location":"sast/supported/spotbugs.j2.html","title":"SpotBugs","text":"<p>SpotBugs is a program which uses static analysis to look for bugs in Java code. SpotBugs is a fork of FindBugs (which is now an abandoned project), carrying on from the point where it left off with support of its community.</p> <p>Type: <code>Data Flow Analysis (Compiled code)</code></p> <p>Supported version: <code>4.9.7</code></p> <p>Supported languages: <code>Java</code></p> <p>Legal Notice</p> <ul> <li>License: <code>LGPL-2.1</code> (<code>Copyleft</code>) </li> </ul> <p>Disclaimer</p> <p>This project provides wrappers and scripts to integrate with <code>SpotBugs</code>, but does not include the tool itself. Therefore, you are responsible for reviewing and complying with the product's license and terms of use.</p> <p>Requirements</p> <ul> <li> <p>An existing installation of SpotBugs.</p> </li> <li> <p>An internet connection is required only to download find-sec-bugs plugin.</p> </li> </ul> <p>Key Considerations</p> <p>The analysis tool is using find-sec-bugs which is license under LGPL-3.0.</p>"}]}